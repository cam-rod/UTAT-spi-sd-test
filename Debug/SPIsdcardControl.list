
SPIsdcardControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009560  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080099c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08009a38  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08009a98  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000519c  24000138  08009af8  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240052d4  08009af8  000252d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf98  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c3  00000000  00000000  0004d0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  000518c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  000537d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e2a  00000000  00000000  00055560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024817  00000000  00000000  0005b38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b20c  00000000  00000000  0007fba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fadad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000896c  00000000  00000000  001fae00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080097e8 	.word	0x080097e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	080097e8 	.word	0x080097e8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fe66 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f81e 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f9bc 	bl	800096c <MX_GPIO_Init>
  MX_ETH_Init();
 80005f4:	f000 f89a 	bl	800072c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f93a 	bl	8000870 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fc:	f000 f984 	bl	8000908 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8000600:	f000 f8e0 	bl	80007c4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000604:	f006 fa74 	bl	8006af0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <main+0x3c>)
 800060a:	2100      	movs	r1, #0
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <main+0x40>)
 800060e:	f006 fab9 	bl	8006b84 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <main+0x44>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f006 fa8e 	bl	8006b38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x38>
 800061e:	bf00      	nop
 8000620:	080098f4 	.word	0x080098f4
 8000624:	08000b65 	.word	0x08000b65
 8000628:	24000860 	.word	0x24000860

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	; 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f009 f80a 	bl	8009654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f009 f804 	bl	8009654 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f001 fee9 	bl	8002424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <SystemClock_Config+0xf8>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	4a32      	ldr	r2, [pc, #200]	; (8000724 <SystemClock_Config+0xf8>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <SystemClock_Config+0xf8>)
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <SystemClock_Config+0xfc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a2c      	ldr	r2, [pc, #176]	; (8000728 <SystemClock_Config+0xfc>)
 8000676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xfc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000688:	bf00      	nop
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xfc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000696:	d1f8      	bne.n	800068a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000698:	2303      	movs	r3, #3
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2340      	movs	r3, #64	; 0x40
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 feee 	bl	80024b8 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006e2:	f000 fa59 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	233f      	movs	r3, #63	; 0x3f
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2101      	movs	r1, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fb02 	bl	8002d14 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000716:	f000 fa3f 	bl	8000b98 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58000400 	.word	0x58000400
 8000728:	58024800 	.word	0x58024800

0800072c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ETH_Init+0x80>)
 8000732:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MX_ETH_Init+0x84>)
 8000734:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ETH_Init+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_ETH_Init+0x88>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ETH_Init+0x88>)
 8000744:	22e1      	movs	r2, #225	; 0xe1
 8000746:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_ETH_Init+0x88>)
 800074a:	2200      	movs	r2, #0
 800074c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ETH_Init+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ETH_Init+0x88>)
 8000756:	2200      	movs	r2, #0
 8000758:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ETH_Init+0x80>)
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_ETH_Init+0x88>)
 800075e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_ETH_Init+0x80>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ETH_Init+0x80>)
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_ETH_Init+0x8c>)
 800076a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ETH_Init+0x80>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_ETH_Init+0x90>)
 8000770:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_ETH_Init+0x80>)
 8000774:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000778:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_ETH_Init+0x80>)
 800077c:	f000 ff1c 	bl	80015b8 <HAL_ETH_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000786:	f000 fa07 	bl	8000b98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800078a:	2238      	movs	r2, #56	; 0x38
 800078c:	2100      	movs	r1, #0
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_ETH_Init+0x94>)
 8000790:	f008 ff60 	bl	8009654 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_ETH_Init+0x94>)
 8000796:	2221      	movs	r2, #33	; 0x21
 8000798:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_ETH_Init+0x94>)
 800079c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_ETH_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2400018c 	.word	0x2400018c
 80007b0:	40028000 	.word	0x40028000
 80007b4:	24000864 	.word	0x24000864
 80007b8:	240000d8 	.word	0x240000d8
 80007bc:	24000078 	.word	0x24000078
 80007c0:	24000154 	.word	0x24000154

080007c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007ca:	4a28      	ldr	r2, [pc, #160]	; (800086c <MX_SPI3_Init+0xa8>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007de:	2203      	movs	r2, #3
 80007e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_SPI3_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI3_Init+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI3_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI3_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI3_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI3_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_SPI3_Init+0xa4>)
 8000854:	f004 f994 	bl	8004b80 <HAL_SPI_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800085e:	f000 f99b 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2400023c 	.word	0x2400023c
 800086c:	40003c00 	.word	0x40003c00

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_USART3_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_USART3_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008ba:	f004 fd5b 	bl	8005374 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f968 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008cc:	f005 fcf8 	bl	80062c0 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f95f 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008de:	f005 fd2d 	bl	800633c <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f956 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008ee:	f005 fcae 	bl	800624e <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f94e 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	240002c4 	.word	0x240002c4
 8000904:	40004800 	.word	0x40004800

08000908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000910:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000914:	2209      	movs	r2, #9
 8000916:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091a:	2202      	movs	r2, #2
 800091c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092c:	2201      	movs	r2, #1
 800092e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093e:	2201      	movs	r2, #1
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000950:	f001 fc1f 	bl	8002192 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800095a:	f000 f91d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000354 	.word	0x24000354
 8000968:	40080000 	.word	0x40080000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a6f      	ldr	r2, [pc, #444]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b6d      	ldr	r3, [pc, #436]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a0:	4b69      	ldr	r3, [pc, #420]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a68      	ldr	r2, [pc, #416]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b65      	ldr	r3, [pc, #404]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x1dc>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	483c      	ldr	r0, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x1e0>)
 8000a5a:	f001 fb81 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a64:	483a      	ldr	r0, [pc, #232]	; (8000b50 <MX_GPIO_Init+0x1e4>)
 8000a66:	f001 fb7b 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a70:	4838      	ldr	r0, [pc, #224]	; (8000b54 <MX_GPIO_Init+0x1e8>)
 8000a72:	f001 fb75 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4837      	ldr	r0, [pc, #220]	; (8000b58 <MX_GPIO_Init+0x1ec>)
 8000a7c:	f001 fb70 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4831      	ldr	r0, [pc, #196]	; (8000b5c <MX_GPIO_Init+0x1f0>)
 8000a96:	f001 f9b3 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4827      	ldr	r0, [pc, #156]	; (8000b4c <MX_GPIO_Init+0x1e0>)
 8000aae:	f001 f9a7 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4820      	ldr	r0, [pc, #128]	; (8000b4c <MX_GPIO_Init+0x1e0>)
 8000aca:	f001 f999 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ace:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_GPIO_Init+0x1e4>)
 8000ae8:	f001 f98a 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x1e8>)
 8000b06:	f001 f97b 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4810      	ldr	r0, [pc, #64]	; (8000b60 <MX_GPIO_Init+0x1f4>)
 8000b20:	f001 f96e 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_GPIO_Init+0x1ec>)
 8000b3c:	f001 f960 	bl	8001e00 <HAL_GPIO_Init>

}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020000 	.word	0x58020000
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58020c00 	.word	0x58020c00
 8000b58:	58021000 	.word	0x58021000
 8000b5c:	58020800 	.word	0x58020800
 8000b60:	58021800 	.word	0x58021800

08000b64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f006 f89b 	bl	8006ca8 <osDelay>
 8000b72:	e7fb      	b.n	8000b6c <StartDefaultTask+0x8>

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 fbd3 	bl	8001330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010000 	.word	0x40010000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x38>)
 8000bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_MspInit+0x38>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x38>)
 8000bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f06f 0001 	mvn.w	r0, #1
 8000bd0:	f000 fcca 	bl	8001568 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400

08000be0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a59      	ldr	r2, [pc, #356]	; (8000d64 <HAL_ETH_MspInit+0x184>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f040 80ab 	bne.w	8000d5a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c04:	4b58      	ldr	r3, [pc, #352]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0a:	4a57      	ldr	r2, [pc, #348]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c14:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c22:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c28:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c32:	4b4d      	ldr	r3, [pc, #308]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c40:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c46:	4a48      	ldr	r2, [pc, #288]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c50:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a40      	ldr	r2, [pc, #256]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a39      	ldr	r2, [pc, #228]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cd6:	2332      	movs	r3, #50	; 0x32
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481e      	ldr	r0, [pc, #120]	; (8000d6c <HAL_ETH_MspInit+0x18c>)
 8000cf2:	f001 f885 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cf6:	2386      	movs	r3, #134	; 0x86
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4817      	ldr	r0, [pc, #92]	; (8000d70 <HAL_ETH_MspInit+0x190>)
 8000d12:	f001 f875 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4810      	ldr	r0, [pc, #64]	; (8000d74 <HAL_ETH_MspInit+0x194>)
 8000d34:	f001 f864 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4a:	230b      	movs	r3, #11
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <HAL_ETH_MspInit+0x198>)
 8000d56:	f001 f853 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3738      	adds	r7, #56	; 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40028000 	.word	0x40028000
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58021800 	.word	0x58021800

08000d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ba      	sub	sp, #232	; 0xe8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	22bc      	movs	r2, #188	; 0xbc
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f008 fc59 	bl	8009654 <memset>
  if(hspi->Instance==SPI3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a37      	ldr	r2, [pc, #220]	; (8000e84 <HAL_SPI_MspInit+0x108>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d166      	bne.n	8000e7a <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fb78 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000dc6:	f7ff fee7 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_SPI_MspInit+0x10c>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e24:	2304      	movs	r3, #4
 8000e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <HAL_SPI_MspInit+0x110>)
 8000e4a:	f000 ffd9 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <HAL_SPI_MspInit+0x114>)
 8000e76:	f000 ffc3 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	37e8      	adds	r7, #232	; 0xe8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40003c00 	.word	0x40003c00
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58020800 	.word	0x58020800

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b8      	sub	sp, #224	; 0xe0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	22bc      	movs	r2, #188	; 0xbc
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f008 fbcd 	bl	8009654 <memset>
  if(huart->Instance==USART3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_UART_MspInit+0xc0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d142      	bne.n	8000f4a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 faec 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ede:	f7ff fe5b 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0xc8>)
 8000f46:	f000 ff5b 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	37e0      	adds	r7, #224	; 0xe0
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004800 	.word	0x40004800
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58020c00 	.word	0x58020c00

08000f60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b8      	sub	sp, #224	; 0xe0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	22bc      	movs	r2, #188	; 0xbc
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 fb67 	bl	8009654 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <HAL_PCD_MspInit+0xe8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d156      	bne.n	800103e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fa84 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000fae:	f7ff fdf3 	bl	8000b98 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fb2:	f001 fa71 	bl	8002498 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_PCD_MspInit+0xec>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_PCD_MspInit+0xec>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_PCD_MspInit+0xec>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fd4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4815      	ldr	r0, [pc, #84]	; (8001050 <HAL_PCD_MspInit+0xf0>)
 8000ffc:	f000 ff00 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_PCD_MspInit+0xf0>)
 800101c:	f000 fef0 	bl	8001e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_PCD_MspInit+0xec>)
 8001022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_PCD_MspInit+0xec>)
 8001028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800102c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_PCD_MspInit+0xec>)
 8001032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	37e0      	adds	r7, #224	; 0xe0
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40080000 	.word	0x40080000
 800104c:	58024400 	.word	0x58024400
 8001050:	58020000 	.word	0x58020000

08001054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	d842      	bhi.n	80010e8 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001062:	2200      	movs	r2, #0
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	2019      	movs	r0, #25
 8001068:	f000 fa7e 	bl	8001568 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800106c:	2019      	movs	r0, #25
 800106e:	f000 fa95 	bl	800159c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <HAL_InitTick+0xac>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <HAL_InitTick+0xb0>)
 800107a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800107e:	4a21      	ldr	r2, [pc, #132]	; (8001104 <HAL_InitTick+0xb0>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_InitTick+0xb0>)
 800108a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f9c3 	bl	800342c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010a6:	f002 f9ab 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 80010aa:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_InitTick+0xb4>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0c9b      	lsrs	r3, r3, #18
 80010b6:	3b01      	subs	r3, #1
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_InitTick+0xb8>)
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_InitTick+0xbc>)
 80010be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0xb8>)
 80010c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c8:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_InitTick+0xb8>)
 80010ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010cc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_InitTick+0xb8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_InitTick+0xb8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <HAL_InitTick+0xb8>)
 80010dc:	f003 fe71 	bl	8004dc2 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d107      	bne.n	80010f6 <HAL_InitTick+0xa2>
 80010e6:	e001      	b.n	80010ec <HAL_InitTick+0x98>
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e005      	b.n	80010f8 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <HAL_InitTick+0xb8>)
 80010ee:	f003 fec9 	bl	8004e84 <HAL_TIM_Base_Start_IT>
 80010f2:	4603      	mov	r3, r0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3738      	adds	r7, #56	; 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24000008 	.word	0x24000008
 8001104:	58024400 	.word	0x58024400
 8001108:	431bde83 	.word	0x431bde83
 800110c:	2400086c 	.word	0x2400086c
 8001110:	40010000 	.word	0x40010000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM1_UP_IRQHandler+0x10>)
 8001146:	f003 ff15 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2400086c 	.word	0x2400086c

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <SystemInit+0xe4>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a36      	ldr	r2, [pc, #216]	; (8001238 <SystemInit+0xe4>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001168:	4b34      	ldr	r3, [pc, #208]	; (800123c <SystemInit+0xe8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	2b06      	cmp	r3, #6
 8001172:	d807      	bhi.n	8001184 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <SystemInit+0xe8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 030f 	bic.w	r3, r3, #15
 800117c:	4a2f      	ldr	r2, [pc, #188]	; (800123c <SystemInit+0xe8>)
 800117e:	f043 0307 	orr.w	r3, r3, #7
 8001182:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <SystemInit+0xec>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <SystemInit+0xec>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <SystemInit+0xec>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <SystemInit+0xec>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4929      	ldr	r1, [pc, #164]	; (8001240 <SystemInit+0xec>)
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <SystemInit+0xf0>)
 800119e:	4013      	ands	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <SystemInit+0xe8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <SystemInit+0xe8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 030f 	bic.w	r3, r3, #15
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <SystemInit+0xe8>)
 80011b8:	f043 0307 	orr.w	r3, r3, #7
 80011bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <SystemInit+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <SystemInit+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <SystemInit+0xec>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <SystemInit+0xec>)
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <SystemInit+0xf4>)
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <SystemInit+0xec>)
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <SystemInit+0xf8>)
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <SystemInit+0xec>)
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <SystemInit+0xfc>)
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <SystemInit+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <SystemInit+0xec>)
 80011ea:	4a19      	ldr	r2, [pc, #100]	; (8001250 <SystemInit+0xfc>)
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <SystemInit+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <SystemInit+0xec>)
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <SystemInit+0xfc>)
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <SystemInit+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <SystemInit+0xec>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <SystemInit+0xec>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <SystemInit+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <SystemInit+0x100>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <SystemInit+0x104>)
 8001218:	4013      	ands	r3, r2
 800121a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800121e:	d202      	bcs.n	8001226 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <SystemInit+0x108>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <SystemInit+0x10c>)
 8001228:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800122c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	52002000 	.word	0x52002000
 8001240:	58024400 	.word	0x58024400
 8001244:	eaf6ed7f 	.word	0xeaf6ed7f
 8001248:	02020200 	.word	0x02020200
 800124c:	01ff0000 	.word	0x01ff0000
 8001250:	01010280 	.word	0x01010280
 8001254:	5c001000 	.word	0x5c001000
 8001258:	ffff0000 	.word	0xffff0000
 800125c:	51008108 	.word	0x51008108
 8001260:	52004000 	.word	0x52004000

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001268:	f7ff ff74 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f008 f9ab 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff f9a5 	bl	80005e4 <main>
  bx  lr
 800129a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012a4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80012a8:	080099c0 	.word	0x080099c0
  ldr r2, =_sbss
 80012ac:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80012b0:	240052d4 	.word	0x240052d4

080012b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC3_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f947 	bl	8001552 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c4:	f001 fedc 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_Init+0x68>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	4913      	ldr	r1, [pc, #76]	; (8001324 <HAL_Init+0x6c>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_Init+0x68>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_Init+0x6c>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <HAL_Init+0x70>)
 80012fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_Init+0x74>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001302:	200f      	movs	r0, #15
 8001304:	f7ff fea6 	bl	8001054 <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e002      	b.n	8001318 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001312:	f7ff fc47 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024400 	.word	0x58024400
 8001324:	08009918 	.word	0x08009918
 8001328:	24000004 	.word	0x24000004
 800132c:	24000000 	.word	0x24000000

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2400000c 	.word	0x2400000c
 8001354:	240008b8 	.word	0x240008b8

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	240008b8 	.word	0x240008b8

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2400000c 	.word	0x2400000c

080013b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetREVID+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0c1b      	lsrs	r3, r3, #16
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	5c001000 	.word	0x5c001000

080013d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	58000400 	.word	0x58000400

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	4313      	orrs	r3, r2
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	05fa0000 	.word	0x05fa0000

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff4c 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001576:	f7ff ff63 	bl	8001440 <__NVIC_GetPriorityGrouping>
 800157a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f7ff ffb3 	bl	80014ec <NVIC_EncodePriority>
 8001586:	4602      	mov	r2, r0
 8001588:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff82 	bl	8001498 <__NVIC_SetPriority>
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff56 	bl	800145c <__NVIC_EnableIRQ>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0cf      	b.n	800176a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2223      	movs	r2, #35	; 0x23
 80015d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff faff 	bl	8000be0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_ETH_Init+0x1bc>)
 80015e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e8:	4a62      	ldr	r2, [pc, #392]	; (8001774 <HAL_ETH_Init+0x1bc>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015f2:	4b60      	ldr	r3, [pc, #384]	; (8001774 <HAL_ETH_Init+0x1bc>)
 80015f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7a1b      	ldrb	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff fee1 	bl	80013d0 <HAL_SYSCFG_ETHInterfaceSelect>
 800160e:	e003      	b.n	8001618 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001610:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001614:	f7ff fedc 	bl	80013d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_ETH_Init+0x1c0>)
 800161a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff fe90 	bl	8001358 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800163a:	e011      	b.n	8001660 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800163c:	f7ff fe8c 	bl	8001358 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800164a:	d909      	bls.n	8001660 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2204      	movs	r2, #4
 8001650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	22e0      	movs	r2, #224	; 0xe0
 8001658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e084      	b.n	800176a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1e4      	bne.n	800163c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f886 	bl	8001784 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001678:	f001 fe7c 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 800167c:	4603      	mov	r3, r0
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_ETH_Init+0x1c4>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9a      	lsrs	r2, r3, #18
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3a01      	subs	r2, #1
 800168c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fa71 	bl	8001b78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016a2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	22e0      	movs	r2, #224	; 0xe0
 80016ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e049      	b.n	800176a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_ETH_Init+0x1c8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6952      	ldr	r2, [r2, #20]
 80016ea:	0051      	lsls	r1, r2, #1
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fad9 	bl	8001cb2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fb1f 	bl	8001d44 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	3305      	adds	r3, #5
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	021a      	lsls	r2, r3, #8
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	061a      	lsls	r2, r3, #24
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	3302      	adds	r3, #2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001744:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001752:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001754:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2210      	movs	r2, #16
 8001764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	58024400 	.word	0x58024400
 8001778:	58000400 	.word	0x58000400
 800177c:	431bde83 	.word	0x431bde83
 8001780:	ffff8001 	.word	0xffff8001

08001784 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001794:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800179c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800179e:	f001 fde9 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80017a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d908      	bls.n	80017be <HAL_ETH_SetMDIOClockRange+0x3a>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d804      	bhi.n	80017be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e027      	b.n	800180e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d908      	bls.n	80017d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d204      	bcs.n	80017d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e01a      	b.n	800180e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d303      	bcc.n	80017e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d911      	bls.n	800180c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d908      	bls.n	8001802 <HAL_ETH_SetMDIOClockRange+0x7e>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_ETH_SetMDIOClockRange+0xac>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d804      	bhi.n	8001802 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e005      	b.n	800180e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e000      	b.n	800180e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800180c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	01312cff 	.word	0x01312cff
 8001824:	02160ebf 	.word	0x02160ebf
 8001828:	03938700 	.word	0x03938700
 800182c:	05f5e0ff 	.word	0x05f5e0ff
 8001830:	08f0d17f 	.word	0x08f0d17f

08001834 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b1b      	ldrb	r3, [r3, #12]
 8001854:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b5b      	ldrb	r3, [r3, #13]
 800185c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800185e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	7b9b      	ldrb	r3, [r3, #14]
 8001864:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	7bdb      	ldrb	r3, [r3, #15]
 800186c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800186e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	7c12      	ldrb	r2, [r2, #16]
 8001874:	2a00      	cmp	r2, #0
 8001876:	d102      	bne.n	800187e <ETH_SetMACConfig+0x4a>
 8001878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800187c:	e000      	b.n	8001880 <ETH_SetMACConfig+0x4c>
 800187e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001880:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	7c52      	ldrb	r2, [r2, #17]
 8001886:	2a00      	cmp	r2, #0
 8001888:	d102      	bne.n	8001890 <ETH_SetMACConfig+0x5c>
 800188a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800188e:	e000      	b.n	8001892 <ETH_SetMACConfig+0x5e>
 8001890:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	7c9b      	ldrb	r3, [r3, #18]
 8001898:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800189a:	431a      	orrs	r2, r3
               macconf->Speed |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7f1b      	ldrb	r3, [r3, #28]
 80018ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7f5b      	ldrb	r3, [r3, #29]
 80018b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	7f92      	ldrb	r2, [r2, #30]
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d102      	bne.n	80018c6 <ETH_SetMACConfig+0x92>
 80018c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c4:	e000      	b.n	80018c8 <ETH_SetMACConfig+0x94>
 80018c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7fdb      	ldrb	r3, [r3, #31]
 80018ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d102      	bne.n	80018e2 <ETH_SetMACConfig+0xae>
 80018dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e0:	e000      	b.n	80018e4 <ETH_SetMACConfig+0xb0>
 80018e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <ETH_SetMACConfig+0x22c>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	430b      	orrs	r3, r1
 8001910:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001916:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800191e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001920:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001928:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800192a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001932:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001934:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800193c:	2a00      	cmp	r2, #0
 800193e:	d102      	bne.n	8001946 <ETH_SetMACConfig+0x112>
 8001940:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001944:	e000      	b.n	8001948 <ETH_SetMACConfig+0x114>
 8001946:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001948:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <ETH_SetMACConfig+0x230>)
 800195a:	4013      	ands	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	430b      	orrs	r3, r1
 8001964:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800196c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <ETH_SetMACConfig+0x234>)
 800197e:	4013      	ands	r3, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	430b      	orrs	r3, r1
 8001988:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001990:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001996:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d101      	bne.n	80019a6 <ETH_SetMACConfig+0x172>
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	e000      	b.n	80019a8 <ETH_SetMACConfig+0x174>
 80019a6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019a8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019d0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019d8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	f023 0103 	bic.w	r1, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019fe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d101      	bne.n	8001a22 <ETH_SetMACConfig+0x1ee>
 8001a1e:	2240      	movs	r2, #64	; 0x40
 8001a20:	e000      	b.n	8001a24 <ETH_SetMACConfig+0x1f0>
 8001a22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	00048083 	.word	0x00048083
 8001a64:	c0f88000 	.word	0xc0f88000
 8001a68:	fffffef0 	.word	0xfffffef0

08001a6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <ETH_SetDMAConfig+0xf8>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	6811      	ldr	r1, [r2, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a92:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <ETH_SetDMAConfig+0xfc>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	7b5b      	ldrb	r3, [r3, #13]
 8001aca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001adc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <ETH_SetDMAConfig+0x100>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001af0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7d1b      	ldrb	r3, [r3, #20]
 8001afc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001afe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7f5b      	ldrb	r3, [r3, #29]
 8001b04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <ETH_SetDMAConfig+0x104>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b26:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	7f1b      	ldrb	r3, [r3, #28]
 8001b2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <ETH_SetDMAConfig+0x108>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	ffff87fd 	.word	0xffff87fd
 8001b68:	ffff2ffe 	.word	0xffff2ffe
 8001b6c:	fffec000 	.word	0xfffec000
 8001b70:	ffc0efef 	.word	0xffc0efef
 8001b74:	7fc0ffff 	.word	0x7fc0ffff

08001b78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0a4      	sub	sp, #144	; 0x90
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b86:	2300      	movs	r3, #0
 8001b88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bd0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bd4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c10:	2320      	movs	r3, #32
 8001c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c52:	2300      	movs	r3, #0
 8001c54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fde6 	bl	8001834 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fee1 	bl	8001a6c <ETH_SetDMAConfig>
}
 8001caa:	bf00      	nop
 8001cac:	3790      	adds	r7, #144	; 0x90
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e01d      	b.n	8001cfc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	3206      	adds	r2, #6
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d9de      	bls.n	8001cc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	461a      	mov	r2, r3
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e023      	b.n	8001d9a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	3212      	adds	r2, #18
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d9d8      	bls.n	8001d52 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <HAL_GPIO_Init+0x234>)
 8001e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e12:	e194      	b.n	800213e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8186 	beq.w	8002138 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d005      	beq.n	8001e44 <HAL_GPIO_Init+0x44>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d130      	bne.n	8001ea6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 0201 	and.w	r2, r3, #1
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d017      	beq.n	8001ee2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d123      	bne.n	8001f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80e0 	beq.w	8002138 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_GPIO_Init+0x238>)
 8001f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <HAL_GPIO_Init+0x238>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_GPIO_Init+0x238>)
 8001f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a29      	ldr	r2, [pc, #164]	; (800203c <HAL_GPIO_Init+0x23c>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <HAL_GPIO_Init+0x240>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d052      	beq.n	8002068 <HAL_GPIO_Init+0x268>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_GPIO_Init+0x244>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <HAL_GPIO_Init+0x22e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <HAL_GPIO_Init+0x248>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02b      	beq.n	800202a <HAL_GPIO_Init+0x22a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_GPIO_Init+0x24c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d025      	beq.n	8002026 <HAL_GPIO_Init+0x226>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_GPIO_Init+0x250>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01f      	beq.n	8002022 <HAL_GPIO_Init+0x222>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_GPIO_Init+0x254>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x21e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_GPIO_Init+0x258>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x21a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_GPIO_Init+0x25c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x216>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_GPIO_Init+0x260>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x212>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_GPIO_Init+0x264>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x20e>
 800200a:	2309      	movs	r3, #9
 800200c:	e02d      	b.n	800206a <HAL_GPIO_Init+0x26a>
 800200e:	230a      	movs	r3, #10
 8002010:	e02b      	b.n	800206a <HAL_GPIO_Init+0x26a>
 8002012:	2308      	movs	r3, #8
 8002014:	e029      	b.n	800206a <HAL_GPIO_Init+0x26a>
 8002016:	2307      	movs	r3, #7
 8002018:	e027      	b.n	800206a <HAL_GPIO_Init+0x26a>
 800201a:	2306      	movs	r3, #6
 800201c:	e025      	b.n	800206a <HAL_GPIO_Init+0x26a>
 800201e:	2305      	movs	r3, #5
 8002020:	e023      	b.n	800206a <HAL_GPIO_Init+0x26a>
 8002022:	2304      	movs	r3, #4
 8002024:	e021      	b.n	800206a <HAL_GPIO_Init+0x26a>
 8002026:	2303      	movs	r3, #3
 8002028:	e01f      	b.n	800206a <HAL_GPIO_Init+0x26a>
 800202a:	2302      	movs	r3, #2
 800202c:	e01d      	b.n	800206a <HAL_GPIO_Init+0x26a>
 800202e:	2301      	movs	r3, #1
 8002030:	e01b      	b.n	800206a <HAL_GPIO_Init+0x26a>
 8002032:	bf00      	nop
 8002034:	58000080 	.word	0x58000080
 8002038:	58024400 	.word	0x58024400
 800203c:	58000400 	.word	0x58000400
 8002040:	58020000 	.word	0x58020000
 8002044:	58020400 	.word	0x58020400
 8002048:	58020800 	.word	0x58020800
 800204c:	58020c00 	.word	0x58020c00
 8002050:	58021000 	.word	0x58021000
 8002054:	58021400 	.word	0x58021400
 8002058:	58021800 	.word	0x58021800
 800205c:	58021c00 	.word	0x58021c00
 8002060:	58022000 	.word	0x58022000
 8002064:	58022400 	.word	0x58022400
 8002068:	2300      	movs	r3, #0
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207a:	4938      	ldr	r1, [pc, #224]	; (800215c <HAL_GPIO_Init+0x35c>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f ae63 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	; 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	58000400 	.word	0x58000400

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002194:	b08f      	sub	sp, #60	; 0x3c
 8002196:	af0a      	add	r7, sp, #40	; 0x28
 8002198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e116      	b.n	80023d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fece 	bl	8000f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 f9a4 	bl	8006530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	687e      	ldr	r6, [r7, #4]
 80021f0:	466d      	mov	r5, sp
 80021f2:	f106 0410 	add.w	r4, r6, #16
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002202:	e885 0003 	stmia.w	r5, {r0, r1}
 8002206:	1d33      	adds	r3, r6, #4
 8002208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800220a:	6838      	ldr	r0, [r7, #0]
 800220c:	f004 f922 	bl	8006454 <USB_CoreInit>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0d7      	b.n	80023d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f004 f992 	bl	8006552 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e04a      	b.n	80022ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	333d      	adds	r3, #61	; 0x3d
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	333c      	adds	r3, #60	; 0x3c
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	b298      	uxth	r0, r3
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3344      	adds	r3, #68	; 0x44
 8002270:	4602      	mov	r2, r0
 8002272:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3340      	adds	r3, #64	; 0x40
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	3348      	adds	r3, #72	; 0x48
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	334c      	adds	r3, #76	; 0x4c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3354      	adds	r3, #84	; 0x54
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3af      	bcc.n	8002234 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e044      	b.n	8002364 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	3301      	adds	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	d3b5      	bcc.n	80022da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	687e      	ldr	r6, [r7, #4]
 8002376:	466d      	mov	r5, sp
 8002378:	f106 0410 	add.w	r4, r6, #16
 800237c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002384:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002388:	e885 0003 	stmia.w	r5, {r0, r1}
 800238c:	1d33      	adds	r3, r6, #4
 800238e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	f004 f92b 	bl	80065ec <USB_DevInit>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e014      	b.n	80023d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f80b 	bl	80023dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fae9 	bl	80069a2 <USB_DevDisconnect>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_PCDEx_ActivateLPM+0x44>)
 800240c:	4313      	orrs	r3, r2
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	10000003 	.word	0x10000003

08002424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00a      	beq.n	800244e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e01f      	b.n	800248a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e01d      	b.n	800248a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	490f      	ldr	r1, [pc, #60]	; (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4313      	orrs	r3, r2
 800245c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800245e:	f7fe ff7b 	bl	8001358 <HAL_GetTick>
 8002462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002464:	e009      	b.n	800247a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002466:	f7fe ff77 	bl	8001358 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002474:	d901      	bls.n	800247a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_PWREx_ConfigSupply+0x70>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d1ee      	bne.n	8002466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	58024800 	.word	0x58024800

08002498 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	58024800 	.word	0x58024800

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	; 0x30
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f000 bc1d 	b.w	8002d06 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8087 	beq.w	80025e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024da:	4b99      	ldr	r3, [pc, #612]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e4:	4b96      	ldr	r3, [pc, #600]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d007      	beq.n	8002500 <HAL_RCC_OscConfig+0x48>
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	2b18      	cmp	r3, #24
 80024f4:	d110      	bne.n	8002518 <HAL_RCC_OscConfig+0x60>
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d06c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x12e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d168      	bne.n	80025e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e3f6      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x78>
 8002522:	4b87      	ldr	r3, [pc, #540]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a86      	ldr	r2, [pc, #536]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e02e      	b.n	800258e <HAL_RCC_OscConfig+0xd6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10c      	bne.n	8002552 <HAL_RCC_OscConfig+0x9a>
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a80      	ldr	r2, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7d      	ldr	r2, [pc, #500]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e01d      	b.n	800258e <HAL_RCC_OscConfig+0xd6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0xbe>
 800255c:	4b78      	ldr	r3, [pc, #480]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a77      	ldr	r2, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b75      	ldr	r3, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a74      	ldr	r2, [pc, #464]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0xd6>
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a71      	ldr	r2, [pc, #452]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d013      	beq.n	80025be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fedf 	bl	8001358 <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7fe fedb 	bl	8001358 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e3aa      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b0:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0xe6>
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fecb 	bl	8001358 <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c6:	f7fe fec7 	bl	8001358 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e396      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x10e>
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80cb 	beq.w	800278c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002600:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_RCC_OscConfig+0x164>
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2b18      	cmp	r3, #24
 8002610:	d156      	bne.n	80026c0 <HAL_RCC_OscConfig+0x208>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d151      	bne.n	80026c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x17c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e368      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 0219 	bic.w	r2, r3, #25
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	493f      	ldr	r1, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002646:	f7fe fe87 	bl	8001358 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fe83 	bl	8001358 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e352      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	f7fe fea4 	bl	80013b8 <HAL_GetREVID>
 8002670:	4603      	mov	r3, r0
 8002672:	f241 0203 	movw	r2, #4099	; 0x1003
 8002676:	4293      	cmp	r3, r2
 8002678:	d817      	bhi.n	80026aa <HAL_RCC_OscConfig+0x1f2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d108      	bne.n	8002694 <HAL_RCC_OscConfig+0x1dc>
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800268a:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002692:	e07b      	b.n	800278c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	031b      	lsls	r3, r3, #12
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a8:	e070      	b.n	800278c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	4921      	ldr	r1, [pc, #132]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026be:	e065      	b.n	800278c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d048      	beq.n	800275a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0219 	bic.w	r2, r3, #25
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	491a      	ldr	r1, [pc, #104]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fe3d 	bl	8001358 <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fe39 	bl	8001358 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e308      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	f7fe fe5a 	bl	80013b8 <HAL_GetREVID>
 8002704:	4603      	mov	r3, r0
 8002706:	f241 0203 	movw	r2, #4099	; 0x1003
 800270a:	4293      	cmp	r3, r2
 800270c:	d81a      	bhi.n	8002744 <HAL_RCC_OscConfig+0x28c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x270>
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	6053      	str	r3, [r2, #4]
 8002726:	e031      	b.n	800278c <HAL_RCC_OscConfig+0x2d4>
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	031b      	lsls	r3, r3, #12
 8002736:	4902      	ldr	r1, [pc, #8]	; (8002740 <HAL_RCC_OscConfig+0x288>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	e026      	b.n	800278c <HAL_RCC_OscConfig+0x2d4>
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
 8002744:	4b9a      	ldr	r3, [pc, #616]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	061b      	lsls	r3, r3, #24
 8002752:	4997      	ldr	r1, [pc, #604]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
 8002758:	e018      	b.n	800278c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b95      	ldr	r3, [pc, #596]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a94      	ldr	r2, [pc, #592]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fdf7 	bl	8001358 <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fdf3 	bl	8001358 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e2c2      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002780:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a9 	beq.w	80028ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a4:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d007      	beq.n	80027c0 <HAL_RCC_OscConfig+0x308>
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b18      	cmp	r3, #24
 80027b4:	d13a      	bne.n	800282c <HAL_RCC_OscConfig+0x374>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d135      	bne.n	800282c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027c0:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_OscConfig+0x320>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e296      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d8:	f7fe fdee 	bl	80013b8 <HAL_GetREVID>
 80027dc:	4603      	mov	r3, r0
 80027de:	f241 0203 	movw	r2, #4099	; 0x1003
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d817      	bhi.n	8002816 <HAL_RCC_OscConfig+0x35e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x348>
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fe:	e075      	b.n	80028ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002800:	4b6b      	ldr	r3, [pc, #428]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	069b      	lsls	r3, r3, #26
 800280e:	4968      	ldr	r1, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002814:	e06a      	b.n	80028ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002816:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	061b      	lsls	r3, r3, #24
 8002824:	4962      	ldr	r1, [pc, #392]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800282a:	e05f      	b.n	80028ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d042      	beq.n	80028ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002834:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fd8a 	bl	8001358 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002848:	f7fe fd86 	bl	8001358 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e255      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800285a:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002866:	f7fe fda7 	bl	80013b8 <HAL_GetREVID>
 800286a:	4603      	mov	r3, r0
 800286c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002870:	4293      	cmp	r3, r2
 8002872:	d817      	bhi.n	80028a4 <HAL_RCC_OscConfig+0x3ec>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	2b20      	cmp	r3, #32
 800287a:	d108      	bne.n	800288e <HAL_RCC_OscConfig+0x3d6>
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002884:	4a4a      	ldr	r2, [pc, #296]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800288a:	6053      	str	r3, [r2, #4]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0x434>
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	069b      	lsls	r3, r3, #26
 800289c:	4944      	ldr	r1, [pc, #272]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
 80028a2:	e023      	b.n	80028ec <HAL_RCC_OscConfig+0x434>
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	493f      	ldr	r1, [pc, #252]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
 80028b8:	e018      	b.n	80028ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80028c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fd47 	bl	8001358 <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028ce:	f7fe fd43 	bl	8001358 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e212      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d036      	beq.n	8002966 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d019      	beq.n	8002934 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002904:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fd24 	bl	8001358 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe fd20 	bl	8001358 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1ef      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x45c>
 8002932:	e018      	b.n	8002966 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7fe fd0a 	bl	8001358 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002948:	f7fe fd06 	bl	8001358 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1d5      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d039      	beq.n	80029e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002984:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002986:	f7fe fce7 	bl	8001358 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800298e:	f7fe fce3 	bl	8001358 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1b2      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x4d6>
 80029ac:	e01b      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
 80029ae:	bf00      	nop
 80029b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b4:	4b9b      	ldr	r3, [pc, #620]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a9a      	ldr	r2, [pc, #616]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c0:	f7fe fcca 	bl	8001358 <HAL_GetTick>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029c8:	f7fe fcc6 	bl	8001358 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e195      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029da:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8081 	beq.w	8002af6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f4:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <HAL_RCC_OscConfig+0x770>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a8b      	ldr	r2, [pc, #556]	; (8002c28 <HAL_RCC_OscConfig+0x770>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a00:	f7fe fcaa 	bl	8001358 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7fe fca6 	bl	8001358 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e175      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a1a:	4b83      	ldr	r3, [pc, #524]	; (8002c28 <HAL_RCC_OscConfig+0x770>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x584>
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	e02d      	b.n	8002a98 <HAL_RCC_OscConfig+0x5e0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5a6>
 8002a44:	4b77      	ldr	r3, [pc, #476]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a76      	ldr	r2, [pc, #472]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	4b74      	ldr	r3, [pc, #464]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a73      	ldr	r2, [pc, #460]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a56:	f023 0304 	bic.w	r3, r3, #4
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x5e0>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x5c8>
 8002a66:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b6c      	ldr	r3, [pc, #432]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a6b      	ldr	r2, [pc, #428]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x5e0>
 8002a80:	4b68      	ldr	r3, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a67      	ldr	r2, [pc, #412]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	4b65      	ldr	r3, [pc, #404]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a64      	ldr	r2, [pc, #400]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fc5a 	bl	8001358 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fc56 	bl	8001358 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e123      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abe:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ee      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x5f0>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fc44 	bl	8001358 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fc40 	bl	8001358 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e10d      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ee      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8102 	beq.w	8002d04 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b00:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b08:	2b18      	cmp	r3, #24
 8002b0a:	f000 80bd 	beq.w	8002c88 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	f040 809e 	bne.w	8002c54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fc18 	bl	8001358 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fc14 	bl	8001358 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0e3      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_OscConfig+0x774>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	4931      	ldr	r1, [pc, #196]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	628b      	str	r3, [r1, #40]	; 0x28
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	3b01      	subs	r3, #1
 8002b74:	025b      	lsls	r3, r3, #9
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	061b      	lsls	r3, r3, #24
 8002b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b94:	4923      	ldr	r1, [pc, #140]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_OscConfig+0x778>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb2:	00d2      	lsls	r2, r2, #3
 8002bb4:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	f023 020c 	bic.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4917      	ldr	r1, [pc, #92]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f023 0202 	bic.w	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	4912      	ldr	r1, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fb9d 	bl	8001358 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c20:	e011      	b.n	8002c46 <HAL_RCC_OscConfig+0x78e>
 8002c22:	bf00      	nop
 8002c24:	58024400 	.word	0x58024400
 8002c28:	58024800 	.word	0x58024800
 8002c2c:	fffffc0c 	.word	0xfffffc0c
 8002c30:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fb90 	bl	8001358 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e05f      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c46:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_OscConfig+0x858>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x77c>
 8002c52:	e057      	b.n	8002d04 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x858>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2d      	ldr	r2, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0x858>)
 8002c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fb7a 	bl	8001358 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fb76 	bl	8001358 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e045      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_OscConfig+0x858>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x7b0>
 8002c86:	e03d      	b.n	8002d04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_RCC_OscConfig+0x858>)
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_OscConfig+0x858>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d031      	beq.n	8002d00 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d12a      	bne.n	8002d00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d122      	bne.n	8002d00 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d11a      	bne.n	8002d00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d111      	bne.n	8002d00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0e1b      	lsrs	r3, r3, #24
 8002cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	58024400 	.word	0x58024400

08002d14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e19c      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b8a      	ldr	r3, [pc, #552]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d910      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b87      	ldr	r3, [pc, #540]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 020f 	bic.w	r2, r3, #15
 8002d3e:	4985      	ldr	r1, [pc, #532]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b83      	ldr	r3, [pc, #524]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e184      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d74:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	4975      	ldr	r1, [pc, #468]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	4b70      	ldr	r3, [pc, #448]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002da2:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	496a      	ldr	r1, [pc, #424]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d908      	bls.n	8002de2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dd0:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	495e      	ldr	r1, [pc, #376]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dfe:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4953      	ldr	r1, [pc, #332]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d908      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f023 020f 	bic.w	r2, r3, #15
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4947      	ldr	r1, [pc, #284]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d055      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4940      	ldr	r1, [pc, #256]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d121      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0f6      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d115      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0ea      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e94:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0de      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0d6      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f023 0207 	bic.w	r2, r3, #7
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4925      	ldr	r1, [pc, #148]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fa47 	bl	8001358 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	f7fe fa43 	bl	8001358 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0be      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d1eb      	bne.n	8002ece <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d010      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d208      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f023 020f 	bic.w	r2, r3, #15
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d214      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	4906      	ldr	r1, [pc, #24]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <HAL_RCC_ClockConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e086      	b.n	8003062 <HAL_RCC_ClockConfig+0x34e>
 8002f54:	52002000 	.word	0x52002000
 8002f58:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d208      	bcs.n	8002f8a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f78:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa6:	4b31      	ldr	r3, [pc, #196]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	492e      	ldr	r1, [pc, #184]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d208      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4922      	ldr	r1, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d208      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4917      	ldr	r1, [pc, #92]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8003010:	4313      	orrs	r3, r2
 8003012:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003014:	f000 f834 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	4912      	ldr	r1, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x35c>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
 8003030:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x358>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_RCC_ClockConfig+0x35c>)
 800303c:	5cd3      	ldrb	r3, [r2, r3]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x360>)
 800304a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x364>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x368>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fffc 	bl	8001054 <HAL_InitTick>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	58024400 	.word	0x58024400
 8003070:	08009918 	.word	0x08009918
 8003074:	24000004 	.word	0x24000004
 8003078:	24000000 	.word	0x24000000
 800307c:	24000008 	.word	0x24000008

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003086:	4bb3      	ldr	r3, [pc, #716]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308e:	2b18      	cmp	r3, #24
 8003090:	f200 8155 	bhi.w	800333e <HAL_RCC_GetSysClockFreq+0x2be>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	08003101 	.word	0x08003101
 80030a0:	0800333f 	.word	0x0800333f
 80030a4:	0800333f 	.word	0x0800333f
 80030a8:	0800333f 	.word	0x0800333f
 80030ac:	0800333f 	.word	0x0800333f
 80030b0:	0800333f 	.word	0x0800333f
 80030b4:	0800333f 	.word	0x0800333f
 80030b8:	0800333f 	.word	0x0800333f
 80030bc:	08003127 	.word	0x08003127
 80030c0:	0800333f 	.word	0x0800333f
 80030c4:	0800333f 	.word	0x0800333f
 80030c8:	0800333f 	.word	0x0800333f
 80030cc:	0800333f 	.word	0x0800333f
 80030d0:	0800333f 	.word	0x0800333f
 80030d4:	0800333f 	.word	0x0800333f
 80030d8:	0800333f 	.word	0x0800333f
 80030dc:	0800312d 	.word	0x0800312d
 80030e0:	0800333f 	.word	0x0800333f
 80030e4:	0800333f 	.word	0x0800333f
 80030e8:	0800333f 	.word	0x0800333f
 80030ec:	0800333f 	.word	0x0800333f
 80030f0:	0800333f 	.word	0x0800333f
 80030f4:	0800333f 	.word	0x0800333f
 80030f8:	0800333f 	.word	0x0800333f
 80030fc:	08003133 	.word	0x08003133
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003100:	4b94      	ldr	r3, [pc, #592]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800310c:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	08db      	lsrs	r3, r3, #3
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	4a90      	ldr	r2, [pc, #576]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
 800311c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800311e:	e111      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003120:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003122:	61bb      	str	r3, [r7, #24]
    break;
 8003124:	e10e      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003126:	4b8d      	ldr	r3, [pc, #564]	; (800335c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003128:	61bb      	str	r3, [r7, #24]
    break;
 800312a:	e10b      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800312c:	4b8c      	ldr	r3, [pc, #560]	; (8003360 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800312e:	61bb      	str	r3, [r7, #24]
    break;
 8003130:	e108      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800313c:	4b85      	ldr	r3, [pc, #532]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003146:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003148:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003152:	4b80      	ldr	r3, [pc, #512]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80e1 	beq.w	8003338 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b02      	cmp	r3, #2
 800317a:	f000 8083 	beq.w	8003284 <HAL_RCC_GetSysClockFreq+0x204>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f200 80a1 	bhi.w	80032c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x114>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d056      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003192:	e099      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02d      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031a0:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	ee07 3a90 	vmov	s15, r3
 80031b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a02 	vldr	s12, [r7, #8]
 80031de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031fa:	e087      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003206:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2e8>
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003222:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323e:	e065      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800336c <HAL_RCC_GetSysClockFreq+0x2ec>
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a02 	vldr	s12, [r7, #8]
 8003266:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2e4>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003282:	e043      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003370 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c6:	e021      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800336c <HAL_RCC_GetSysClockFreq+0x2ec>
 80032d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800330a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	0a5b      	lsrs	r3, r3, #9
 8003312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003316:	3301      	adds	r3, #1
 8003318:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003324:	edd7 6a07 	vldr	s13, [r7, #28]
 8003328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003330:	ee17 3a90 	vmov	r3, s15
 8003334:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003336:	e005      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
    break;
 800333c:	e002      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003340:	61bb      	str	r3, [r7, #24]
    break;
 8003342:	bf00      	nop
  }

  return sysclockfreq;
 8003344:	69bb      	ldr	r3, [r7, #24]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	58024400 	.word	0x58024400
 8003358:	03d09000 	.word	0x03d09000
 800335c:	003d0900 	.word	0x003d0900
 8003360:	007a1200 	.word	0x007a1200
 8003364:	46000000 	.word	0x46000000
 8003368:	4c742400 	.word	0x4c742400
 800336c:	4a742400 	.word	0x4a742400
 8003370:	4af42400 	.word	0x4af42400

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800337a:	f7ff fe81 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490f      	ldr	r1, [pc, #60]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	fa22 f303 	lsr.w	r3, r2, r3
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_RCC_GetHCLKFreq+0x58>)
 80033b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b2:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <HAL_RCC_GetHCLKFreq+0x58>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	58024400 	.word	0x58024400
 80033c8:	08009918 	.word	0x08009918
 80033cc:	24000004 	.word	0x24000004
 80033d0:	24000000 	.word	0x24000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033d8:	f7ff ffcc 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	58024400 	.word	0x58024400
 80033fc:	08009918 	.word	0x08009918

08003400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003404:	f7ff ffb6 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	58024400 	.word	0x58024400
 8003428:	08009918 	.word	0x08009918

0800342c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0207 	and.w	r2, r3, #7
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_RCC_GetClockConfig+0x7c>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_GetClockConfig+0x80>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	58024400 	.word	0x58024400
 80034ac:	52002000 	.word	0x52002000

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034bc:	2300      	movs	r3, #0
 80034be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d03f      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d4:	d02a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034da:	d824      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e0:	d018      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e6:	d81e      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f0:	d007      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034f2:	e018      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4ba3      	ldr	r3, [pc, #652]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4aa2      	ldr	r2, [pc, #648]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003500:	e015      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2102      	movs	r1, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f001 f9d5 	bl	80048b8 <RCCEx_PLL2_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003512:	e00c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fa7e 	bl	8004a1c <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800352c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003534:	4b93      	ldr	r3, [pc, #588]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003540:	4990      	ldr	r1, [pc, #576]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	650b      	str	r3, [r1, #80]	; 0x50
 8003546:	e001      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d03d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	2b04      	cmp	r3, #4
 800355e:	d826      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800357d 	.word	0x0800357d
 800356c:	0800358b 	.word	0x0800358b
 8003570:	0800359d 	.word	0x0800359d
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035b5 	.word	0x080035b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4b81      	ldr	r3, [pc, #516]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4a80      	ldr	r2, [pc, #512]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003588:	e015      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f001 f991 	bl	80048b8 <RCCEx_PLL2_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800359a:	e00c      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3324      	adds	r3, #36	; 0x24
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fa3a 	bl	8004a1c <RCCEx_PLL3_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
      break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035bc:	4b71      	ldr	r3, [pc, #452]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	f023 0207 	bic.w	r2, r3, #7
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	496e      	ldr	r1, [pc, #440]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	650b      	str	r3, [r1, #80]	; 0x50
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d042      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d02b      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d825      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035f0:	2bc0      	cmp	r3, #192	; 0xc0
 80035f2:	d028      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035f4:	2bc0      	cmp	r3, #192	; 0xc0
 80035f6:	d821      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d016      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d81d      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d007      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003608:	e018      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4b5e      	ldr	r3, [pc, #376]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a5d      	ldr	r2, [pc, #372]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003616:	e017      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f001 f94a 	bl	80048b8 <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003628:	e00e      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3324      	adds	r3, #36	; 0x24
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f001 f9f3 	bl	8004a1c <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800363a:	e005      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
      break;
 8003640:	e002      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800364e:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	494a      	ldr	r1, [pc, #296]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	650b      	str	r3, [r1, #80]	; 0x50
 8003660:	e001      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366e:	2b00      	cmp	r3, #0
 8003670:	d049      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800367c:	d030      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800367e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003682:	d82a      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003684:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003688:	d02c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800368a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800368e:	d824      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003694:	d018      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369a:	d81e      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036a6:	e018      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4a35      	ldr	r2, [pc, #212]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036b4:	e017      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 f8fb 	bl	80048b8 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036c6:	e00e      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f9a4 	bl	8004a1c <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036fa:	4922      	ldr	r1, [pc, #136]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	658b      	str	r3, [r1, #88]	; 0x58
 8003700:	e001      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04b      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800371c:	d030      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800371e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003722:	d82a      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003724:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003728:	d02e      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800372a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800372e:	d824      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003734:	d018      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373a:	d81e      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003744:	d007      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003746:	e018      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003754:	e019      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f001 f8ab 	bl	80048b8 <RCCEx_PLL2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003766:	e010      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3324      	adds	r3, #36	; 0x24
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f954 	bl	8004a1c <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003778:	e007      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
      break;
 800377e:	e004      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003784:	58024400 	.word	0x58024400
      break;
 8003788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003790:	4b99      	ldr	r3, [pc, #612]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800379e:	4996      	ldr	r1, [pc, #600]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	658b      	str	r3, [r1, #88]	; 0x58
 80037a4:	e001      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d032      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	2b30      	cmp	r3, #48	; 0x30
 80037bc:	d01c      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037be:	2b30      	cmp	r3, #48	; 0x30
 80037c0:	d817      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d00c      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d813      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d2:	4b89      	ldr	r3, [pc, #548]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	4a88      	ldr	r2, [pc, #544]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037de:	e00e      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 f866 	bl	80048b8 <RCCEx_PLL2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037f0:	e005      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80037fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003804:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003810:	4979      	ldr	r1, [pc, #484]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003812:	4313      	orrs	r3, r2
 8003814:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003816:	e001      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d047      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003830:	d030      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003836:	d82a      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800383c:	d02c      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800383e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003842:	d824      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	d018      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	d81e      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d007      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800385a:	e018      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385c:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003868:	e017      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f001 f821 	bl	80048b8 <RCCEx_PLL2_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800387a:	e00e      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3324      	adds	r3, #36	; 0x24
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f8ca 	bl	8004a1c <RCCEx_PLL3_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800388c:	e005      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
      break;
 8003892:	e002      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038a0:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	4952      	ldr	r1, [pc, #328]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	650b      	str	r3, [r1, #80]	; 0x50
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d049      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038cc:	d02e      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d2:	d828      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d8:	d02a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80038da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038de:	d822      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e4:	d026      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80038e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ea:	d81c      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f0:	d010      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80038f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f6:	d816      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01d      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d111      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3304      	adds	r3, #4
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 ffd5 	bl	80048b8 <RCCEx_PLL2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003912:	e012      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f001 f87e 	bl	8004a1c <RCCEx_PLL3_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003924:	e009      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
      break;
 800392a:	e006      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800392c:	bf00      	nop
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	492a      	ldr	r1, [pc, #168]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800394e:	4313      	orrs	r3, r2
 8003950:	650b      	str	r3, [r1, #80]	; 0x50
 8003952:	e001      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d04d      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800396a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396e:	d02e      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003974:	d828      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d02a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d822      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003986:	d026      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800398c:	d81c      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800398e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003992:	d010      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003998:	d816      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01d      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800399e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a2:	d111      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 ff84 	bl	80048b8 <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039b4:	e012      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3324      	adds	r3, #36	; 0x24
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 f82d 	bl	8004a1c <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039c6:	e009      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
      break;
 80039cc:	e006      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039ce:	bf00      	nop
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039f0:	4901      	ldr	r1, [pc, #4]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	658b      	str	r3, [r1, #88]	; 0x58
 80039f6:	e003      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80039f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a14:	d00e      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1a:	d814      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a24:	d10f      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a26:	4baf      	ldr	r3, [pc, #700]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	4aae      	ldr	r2, [pc, #696]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a32:	e00c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 ff3c 	bl	80048b8 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a54:	4ba3      	ldr	r3, [pc, #652]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a60:	49a0      	ldr	r1, [pc, #640]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	650b      	str	r3, [r1, #80]	; 0x50
 8003a66:	e001      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d032      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d81b      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003a99 	.word	0x08003a99
 8003a90:	08003aa7 	.word	0x08003aa7
 8003a94:	08003abf 	.word	0x08003abf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	4b92      	ldr	r3, [pc, #584]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	4a91      	ldr	r2, [pc, #580]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003aa4:	e00c      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 ff03 	bl	80048b8 <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ab6:	e003      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ac6:	4b87      	ldr	r3, [pc, #540]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	4984      	ldr	r1, [pc, #528]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ad8:	e001      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8086 	beq.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aec:	4b7e      	ldr	r3, [pc, #504]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a7d      	ldr	r2, [pc, #500]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af8:	f7fd fc2e 	bl	8001358 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afe:	e009      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fd fc2a 	bl	8001358 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d902      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	75fb      	strb	r3, [r7, #23]
        break;
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b14:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d166      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b26:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b30:	4053      	eors	r3, r2
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d013      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b44:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a66      	ldr	r2, [pc, #408]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b64      	ldr	r3, [pc, #400]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a63      	ldr	r2, [pc, #396]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b5c:	4a61      	ldr	r2, [pc, #388]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d115      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fbf3 	bl	8001358 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b74:	e00b      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd fbef 	bl	8001358 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d902      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	75fb      	strb	r3, [r7, #23]
            break;
 8003b8c:	e005      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8e:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ed      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d126      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bbe:	0919      	lsrs	r1, r3, #4
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	4947      	ldr	r1, [pc, #284]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	610b      	str	r3, [r1, #16]
 8003bca:	e005      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4a44      	ldr	r2, [pc, #272]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bd6:	6113      	str	r3, [r2, #16]
 8003bd8:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	493f      	ldr	r1, [pc, #252]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	670b      	str	r3, [r1, #112]	; 0x70
 8003bec:	e004      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	75bb      	strb	r3, [r7, #22]
 8003bf2:	e001      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8085 	beq.w	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b28      	cmp	r3, #40	; 0x28
 8003c0c:	d866      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003cf1 	.word	0x08003cf1
 8003c18:	08003cdd 	.word	0x08003cdd
 8003c1c:	08003cdd 	.word	0x08003cdd
 8003c20:	08003cdd 	.word	0x08003cdd
 8003c24:	08003cdd 	.word	0x08003cdd
 8003c28:	08003cdd 	.word	0x08003cdd
 8003c2c:	08003cdd 	.word	0x08003cdd
 8003c30:	08003cdd 	.word	0x08003cdd
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003cdd 	.word	0x08003cdd
 8003c3c:	08003cdd 	.word	0x08003cdd
 8003c40:	08003cdd 	.word	0x08003cdd
 8003c44:	08003cdd 	.word	0x08003cdd
 8003c48:	08003cdd 	.word	0x08003cdd
 8003c4c:	08003cdd 	.word	0x08003cdd
 8003c50:	08003cdd 	.word	0x08003cdd
 8003c54:	08003ccb 	.word	0x08003ccb
 8003c58:	08003cdd 	.word	0x08003cdd
 8003c5c:	08003cdd 	.word	0x08003cdd
 8003c60:	08003cdd 	.word	0x08003cdd
 8003c64:	08003cdd 	.word	0x08003cdd
 8003c68:	08003cdd 	.word	0x08003cdd
 8003c6c:	08003cdd 	.word	0x08003cdd
 8003c70:	08003cdd 	.word	0x08003cdd
 8003c74:	08003cf1 	.word	0x08003cf1
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003cdd 	.word	0x08003cdd
 8003c80:	08003cdd 	.word	0x08003cdd
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003cdd 	.word	0x08003cdd
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003cf1 	.word	0x08003cf1
 8003c98:	08003cdd 	.word	0x08003cdd
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf1 	.word	0x08003cf1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fdfa 	bl	80048b8 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e013      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fea3 	bl	8004a1c <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	e007      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	58024800 	.word	0x58024800
 8003cec:	00ffffcf 	.word	0x00ffffcf
      break;
 8003cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cf8:	4b96      	ldr	r3, [pc, #600]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d04:	4993      	ldr	r1, [pc, #588]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	654b      	str	r3, [r1, #84]	; 0x54
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d038      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d821      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d6f 	.word	0x08003d6f
 8003d30:	08003d45 	.word	0x08003d45
 8003d34:	08003d57 	.word	0x08003d57
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003d6f 	.word	0x08003d6f
 8003d40:	08003d6f 	.word	0x08003d6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fdb4 	bl	80048b8 <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d54:	e00c      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3324      	adds	r3, #36	; 0x24
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fe5d 	bl	8004a1c <RCCEx_PLL3_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d66:	e003      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	e000      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d76:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f023 0207 	bic.w	r2, r3, #7
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	4974      	ldr	r1, [pc, #464]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	654b      	str	r3, [r1, #84]	; 0x54
 8003d88:	e001      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d03a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d821      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003def 	.word	0x08003def
 8003db0:	08003dc5 	.word	0x08003dc5
 8003db4:	08003dd7 	.word	0x08003dd7
 8003db8:	08003def 	.word	0x08003def
 8003dbc:	08003def 	.word	0x08003def
 8003dc0:	08003def 	.word	0x08003def
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fd74 	bl	80048b8 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3324      	adds	r3, #36	; 0x24
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fe1d 	bl	8004a1c <RCCEx_PLL3_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df6:	4b57      	ldr	r3, [pc, #348]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	4953      	ldr	r1, [pc, #332]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	658b      	str	r3, [r1, #88]	; 0x58
 8003e0a:	e001      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d04b      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e26:	d02e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2c:	d828      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d02a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d822      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e3e:	d026      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e44:	d81c      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e50:	d816      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01d      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fd28 	bl	80048b8 <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e6c:	e012      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3324      	adds	r3, #36	; 0x24
 8003e72:	2102      	movs	r1, #2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fdd1 	bl	8004a1c <RCCEx_PLL3_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e7e:	e009      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e86:	bf00      	nop
 8003e88:	e004      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea8:	492a      	ldr	r1, [pc, #168]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	654b      	str	r3, [r1, #84]	; 0x54
 8003eae:	e001      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d04d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003eca:	d02e      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ecc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ed0:	d828      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	d02a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d822      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee2:	d026      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee8:	d81c      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eee:	d010      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef4:	d816      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01d      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d111      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fcd6 	bl	80048b8 <RCCEx_PLL2_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f10:	e012      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3324      	adds	r3, #36	; 0x24
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fd7f 	bl	8004a1c <RCCEx_PLL3_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f22:	e009      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	75fb      	strb	r3, [r7, #23]
      break;
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e004      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f4c:	4901      	ldr	r1, [pc, #4]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	658b      	str	r3, [r1, #88]	; 0x58
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d04b      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f6e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f72:	d02e      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f78:	d828      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	d02a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f84:	d822      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f8a:	d026      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003f8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f90:	d81c      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f96:	d010      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f9c:	d816      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01d      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa6:	d111      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fc82 	bl	80048b8 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fb8:	e012      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3324      	adds	r3, #36	; 0x24
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fd2b 	bl	8004a1c <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fca:	e009      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e006      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e004      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e002      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fe6:	4b9d      	ldr	r3, [pc, #628]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff4:	4999      	ldr	r1, [pc, #612]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8003ffa:	e001      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d10a      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fcfc 	bl	8004a1c <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800402e:	4b8b      	ldr	r3, [pc, #556]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403c:	4987      	ldr	r1, [pc, #540]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800403e:	4313      	orrs	r3, r2
 8004040:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004058:	d10a      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	2102      	movs	r1, #2
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fcdb 	bl	8004a1c <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004070:	4b7a      	ldr	r3, [pc, #488]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	4977      	ldr	r1, [pc, #476]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004080:	4313      	orrs	r3, r2
 8004082:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d034      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800409a:	d01d      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800409c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a0:	d817      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040aa:	d009      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040ac:	e011      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fbff 	bl	80048b8 <RCCEx_PLL2_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040be:	e00c      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3324      	adds	r3, #36	; 0x24
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fca8 	bl	8004a1c <RCCEx_PLL3_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040d0:	e003      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
      break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80040d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e0:	4b5e      	ldr	r3, [pc, #376]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ee:	495b      	ldr	r1, [pc, #364]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	658b      	str	r3, [r1, #88]	; 0x58
 80040f4:	e001      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d033      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004110:	d01c      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004112:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004116:	d816      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800411c:	d003      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800411e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004122:	d007      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004124:	e00f      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004126:	4b4d      	ldr	r3, [pc, #308]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	4a4c      	ldr	r2, [pc, #304]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800412c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004132:	e00c      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fc6e 	bl	8004a1c <RCCEx_PLL3_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
      break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800414c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004154:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004162:	493e      	ldr	r1, [pc, #248]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004164:	4313      	orrs	r3, r2
 8004166:	654b      	str	r3, [r1, #84]	; 0x54
 8004168:	e001      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d029      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d007      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418a:	4b34      	ldr	r3, [pc, #208]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	4a33      	ldr	r2, [pc, #204]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004196:	e00b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb8a 	bl	80048b8 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	4926      	ldr	r1, [pc, #152]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041c8:	e001      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3324      	adds	r3, #36	; 0x24
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fc1b 	bl	8004a1c <RCCEx_PLL3_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d033      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004204:	d017      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420a:	d811      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800420c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004210:	d013      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d80b      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004220:	d106      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800422e:	e007      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	e004      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800423e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004252:	4902      	ldr	r1, [pc, #8]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004254:	4313      	orrs	r3, r2
 8004256:	654b      	str	r3, [r1, #84]	; 0x54
 8004258:	e004      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	492e      	ldr	r1, [pc, #184]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800427e:	4313      	orrs	r3, r2
 8004280:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800428e:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800429c:	4926      	ldr	r1, [pc, #152]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ba:	491f      	ldr	r1, [pc, #124]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042d6:	6113      	str	r3, [r2, #16]
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042e2:	4915      	ldr	r1, [pc, #84]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da08      	bge.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	490e      	ldr	r1, [pc, #56]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	4906      	ldr	r1, [pc, #24]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800431e:	4313      	orrs	r3, r2
 8004320:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004322:	7dbb      	ldrb	r3, [r7, #22]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	58024400 	.word	0x58024400

0800433c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004340:	f7ff f818 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	58024400 	.word	0x58024400
 8004364:	08009918 	.word	0x08009918

08004368 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004370:	4ba1      	ldr	r3, [pc, #644]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800437a:	4b9f      	ldr	r3, [pc, #636]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	0b1b      	lsrs	r3, r3, #12
 8004380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004384:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004386:	4b9c      	ldr	r3, [pc, #624]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004392:	4b99      	ldr	r3, [pc, #612]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8111 	beq.w	80045d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	f000 8083 	beq.w	80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f200 80a1 	bhi.w	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043d2:	e099      	b.n	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d4:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02d      	beq.n	800443c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043e0:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	4a84      	ldr	r2, [pc, #528]	; (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b7b      	ldr	r3, [pc, #492]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a03 	vldr	s12, [r7, #12]
 800441e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800443a:	e087      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800447e:	e065      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044c2:	e043      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800460c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004506:	e021      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800454a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004566:	edd7 6a07 	vldr	s13, [r7, #28]
 800456a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004572:	ee17 2a90 	vmov	r2, s15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004594:	edd7 6a07 	vldr	s13, [r7, #28]
 8004598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
}
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	03d09000 	.word	0x03d09000
 8004600:	46000000 	.word	0x46000000
 8004604:	4c742400 	.word	0x4c742400
 8004608:	4a742400 	.word	0x4a742400
 800460c:	4af42400 	.word	0x4af42400

08004610 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004618:	4ba1      	ldr	r3, [pc, #644]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004622:	4b9f      	ldr	r3, [pc, #636]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	0d1b      	lsrs	r3, r3, #20
 8004628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800462c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800462e:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800463a:	4b99      	ldr	r3, [pc, #612]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	08db      	lsrs	r3, r3, #3
 8004640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8111 	beq.w	8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b02      	cmp	r3, #2
 8004662:	f000 8083 	beq.w	800476c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b02      	cmp	r3, #2
 800466a:	f200 80a1 	bhi.w	80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d056      	beq.n	8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800467a:	e099      	b.n	80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467c:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02d      	beq.n	80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004688:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	4a84      	ldr	r2, [pc, #528]	; (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046e2:	e087      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004726:	e065      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b59      	ldr	r3, [pc, #356]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a03 	vldr	s12, [r7, #12]
 800474e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800476a:	e043      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ae:	e021      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	0a5b      	lsrs	r3, r3, #9
 80047fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800480e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481a:	ee17 2a90 	vmov	r2, s15
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 2a90 	vmov	r2, s15
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	0e1b      	lsrs	r3, r3, #24
 8004856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486a:	edd7 6a07 	vldr	s13, [r7, #28]
 800486e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004876:	ee17 2a90 	vmov	r2, s15
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
}
 8004892:	bf00      	nop
 8004894:	3724      	adds	r7, #36	; 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
 80048a4:	03d09000 	.word	0x03d09000
 80048a8:	46000000 	.word	0x46000000
 80048ac:	4c742400 	.word	0x4c742400
 80048b0:	4a742400 	.word	0x4a742400
 80048b4:	4af42400 	.word	0x4af42400

080048b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048c6:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d101      	bne.n	80048d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e099      	b.n	8004a0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048d6:	4b4f      	ldr	r3, [pc, #316]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a4e      	ldr	r2, [pc, #312]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e2:	f7fc fd39 	bl	8001358 <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048e8:	e008      	b.n	80048fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048ea:	f7fc fd35 	bl	8001358 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e086      	b.n	8004a0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048fc:	4b45      	ldr	r3, [pc, #276]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	031b      	lsls	r3, r3, #12
 8004916:	493f      	ldr	r1, [pc, #252]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	628b      	str	r3, [r1, #40]	; 0x28
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	3b01      	subs	r3, #1
 8004922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	b29b      	uxth	r3, r3
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	3b01      	subs	r3, #1
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800494c:	4931      	ldr	r1, [pc, #196]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800494e:	4313      	orrs	r3, r2
 8004950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004952:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	492d      	ldr	r1, [pc, #180]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f023 0220 	bic.w	r2, r3, #32
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	4928      	ldr	r1, [pc, #160]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <RCCEx_PLL2_Config+0x160>)
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	69d2      	ldr	r2, [r2, #28]
 800498e:	00d2      	lsls	r2, r2, #3
 8004990:	4920      	ldr	r1, [pc, #128]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800499c:	f043 0310 	orr.w	r3, r3, #16
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b4:	e00f      	b.n	80049d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049bc:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c8:	e005      	b.n	80049d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fc fcb9 	bl	8001358 <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049e8:	e008      	b.n	80049fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049ea:	f7fc fcb5 	bl	8001358 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e006      	b.n	8004a0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400
 8004a18:	ffff0007 	.word	0xffff0007

08004a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d101      	bne.n	8004a3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e099      	b.n	8004b6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a3a:	4b4f      	ldr	r3, [pc, #316]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a4e      	ldr	r2, [pc, #312]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a46:	f7fc fc87 	bl	8001358 <HAL_GetTick>
 8004a4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a4e:	f7fc fc83 	bl	8001358 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e086      	b.n	8004b6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a6c:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	051b      	lsls	r3, r3, #20
 8004a7a:	493f      	ldr	r1, [pc, #252]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	025b      	lsls	r3, r3, #9
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ab0:	4931      	ldr	r1, [pc, #196]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ab6:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	492d      	ldr	r1, [pc, #180]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4928      	ldr	r1, [pc, #160]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <RCCEx_PLL3_Config+0x160>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	69d2      	ldr	r2, [r2, #28]
 8004af2:	00d2      	lsls	r2, r2, #3
 8004af4:	4920      	ldr	r1, [pc, #128]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004afa:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b18:	e00f      	b.n	8004b3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b2c:	e005      	b.n	8004b3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a11      	ldr	r2, [pc, #68]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b46:	f7fc fc07 	bl	8001358 <HAL_GetTick>
 8004b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b4e:	f7fc fc03 	bl	8001358 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e006      	b.n	8004b6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	ffff0007 	.word	0xffff0007

08004b80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0f1      	b.n	8004d76 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a78      	ldr	r2, [pc, #480]	; (8004d80 <HAL_SPI_Init+0x200>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00f      	beq.n	8004bc2 <HAL_SPI_Init+0x42>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a77      	ldr	r2, [pc, #476]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00a      	beq.n	8004bc2 <HAL_SPI_Init+0x42>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a75      	ldr	r2, [pc, #468]	; (8004d88 <HAL_SPI_Init+0x208>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d005      	beq.n	8004bc2 <HAL_SPI_Init+0x42>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d901      	bls.n	8004bc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0d9      	b.n	8004d76 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8e2 	bl	8004d8c <SPI_GetPacketSize>
 8004bc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6c      	ldr	r2, [pc, #432]	; (8004d80 <HAL_SPI_Init+0x200>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00c      	beq.n	8004bee <HAL_SPI_Init+0x6e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6a      	ldr	r2, [pc, #424]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <HAL_SPI_Init+0x6e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a69      	ldr	r2, [pc, #420]	; (8004d88 <HAL_SPI_Init+0x208>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_Init+0x6e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d811      	bhi.n	8004c12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bf2:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_SPI_Init+0x200>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a61      	ldr	r2, [pc, #388]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_SPI_Init+0x8c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a60      	ldr	r2, [pc, #384]	; (8004d88 <HAL_SPI_Init+0x208>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d104      	bne.n	8004c16 <HAL_SPI_Init+0x96>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d901      	bls.n	8004c16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0af      	b.n	8004d76 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc f8a6 	bl	8000d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004c52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5c:	d119      	bne.n	8004c92 <HAL_SPI_Init+0x112>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c66:	d103      	bne.n	8004c70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c80:	d107      	bne.n	8004c92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	ea42 0103 	orr.w	r1, r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d113      	bne.n	8004d32 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40013000 	.word	0x40013000
 8004d84:	40003800 	.word	0x40003800
 8004d88:	40003c00 	.word	0x40003c00

08004d8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	3307      	adds	r3, #7
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e049      	b.n	8004e68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f841 	bl	8004e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 f9ff 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e054      	b.n	8004f46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a21      	ldr	r2, [pc, #132]	; (8004f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIM_Base_Start_IT+0xe0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIM_Base_Start_IT+0xe8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d115      	bne.n	8004f30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <HAL_TIM_Base_Start_IT+0xec>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d015      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0xbe>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d011      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	e008      	b.n	8004f42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e000      	b.n	8004f44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40010400 	.word	0x40010400
 8004f68:	40001800 	.word	0x40001800
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	00010007 	.word	0x00010007

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0202 	mvn.w	r2, #2
 8004fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f905 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f8f7 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f908 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f8db 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8cd 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8de 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0208 	mvn.w	r2, #8
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2204      	movs	r2, #4
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8b1 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8a3 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8b4 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0210 	mvn.w	r2, #16
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f887 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f879 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f88a 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0201 	mvn.w	r2, #1
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fb fd3e 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f914 	bl	800534c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d10e      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f907 	bl	8005360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d10e      	bne.n	800517e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d107      	bne.n	800517e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f838 	bl	80051ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b20      	cmp	r3, #32
 800518a:	d10e      	bne.n	80051aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d107      	bne.n	80051aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0220 	mvn.w	r2, #32
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f8c7 	bl	8005338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a40      	ldr	r2, [pc, #256]	; (8005318 <TIM_Base_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d00f      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3d      	ldr	r2, [pc, #244]	; (800531c <TIM_Base_SetConfig+0x118>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3b      	ldr	r2, [pc, #236]	; (8005324 <TIM_Base_SetConfig+0x120>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <TIM_Base_SetConfig+0x124>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <TIM_Base_SetConfig+0x114>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01f      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d01b      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2c      	ldr	r2, [pc, #176]	; (800531c <TIM_Base_SetConfig+0x118>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d017      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <TIM_Base_SetConfig+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00f      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <TIM_Base_SetConfig+0x124>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00b      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a28      	ldr	r2, [pc, #160]	; (800532c <TIM_Base_SetConfig+0x128>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <TIM_Base_SetConfig+0x12c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_Base_SetConfig+0x9a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <TIM_Base_SetConfig+0x130>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d108      	bne.n	80052b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <TIM_Base_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0xf8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a12      	ldr	r2, [pc, #72]	; (8005328 <TIM_Base_SetConfig+0x124>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0xf8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a11      	ldr	r2, [pc, #68]	; (800532c <TIM_Base_SetConfig+0x128>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0xf8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a10      	ldr	r2, [pc, #64]	; (8005330 <TIM_Base_SetConfig+0x12c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0xf8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	; (8005334 <TIM_Base_SetConfig+0x130>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40010400 	.word	0x40010400
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e042      	b.n	800540c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fb fd7b 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	; 0x24
 80053a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f82c 	bl	8005414 <UART_SetConfig>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e022      	b.n	800540c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fd88 	bl	8005ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fe0f 	bl	8006028 <UART_CheckIdleState>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005418:	b092      	sub	sp, #72	; 0x48
 800541a:	af00      	add	r7, sp, #0
 800541c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	431a      	orrs	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	431a      	orrs	r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	4313      	orrs	r3, r2
 800543a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4bbe      	ldr	r3, [pc, #760]	; (800573c <UART_SetConfig+0x328>)
 8005444:	4013      	ands	r3, r2
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800544c:	430b      	orrs	r3, r1
 800544e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4ab3      	ldr	r2, [pc, #716]	; (8005740 <UART_SetConfig+0x32c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800547c:	4313      	orrs	r3, r2
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	4baf      	ldr	r3, [pc, #700]	; (8005744 <UART_SetConfig+0x330>)
 8005488:	4013      	ands	r3, r2
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005490:	430b      	orrs	r3, r1
 8005492:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	f023 010f 	bic.w	r1, r3, #15
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4aa6      	ldr	r2, [pc, #664]	; (8005748 <UART_SetConfig+0x334>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d177      	bne.n	80055a4 <UART_SetConfig+0x190>
 80054b4:	4ba5      	ldr	r3, [pc, #660]	; (800574c <UART_SetConfig+0x338>)
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054bc:	2b28      	cmp	r3, #40	; 0x28
 80054be:	d86d      	bhi.n	800559c <UART_SetConfig+0x188>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0xb4>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	0800556d 	.word	0x0800556d
 80054cc:	0800559d 	.word	0x0800559d
 80054d0:	0800559d 	.word	0x0800559d
 80054d4:	0800559d 	.word	0x0800559d
 80054d8:	0800559d 	.word	0x0800559d
 80054dc:	0800559d 	.word	0x0800559d
 80054e0:	0800559d 	.word	0x0800559d
 80054e4:	0800559d 	.word	0x0800559d
 80054e8:	08005575 	.word	0x08005575
 80054ec:	0800559d 	.word	0x0800559d
 80054f0:	0800559d 	.word	0x0800559d
 80054f4:	0800559d 	.word	0x0800559d
 80054f8:	0800559d 	.word	0x0800559d
 80054fc:	0800559d 	.word	0x0800559d
 8005500:	0800559d 	.word	0x0800559d
 8005504:	0800559d 	.word	0x0800559d
 8005508:	0800557d 	.word	0x0800557d
 800550c:	0800559d 	.word	0x0800559d
 8005510:	0800559d 	.word	0x0800559d
 8005514:	0800559d 	.word	0x0800559d
 8005518:	0800559d 	.word	0x0800559d
 800551c:	0800559d 	.word	0x0800559d
 8005520:	0800559d 	.word	0x0800559d
 8005524:	0800559d 	.word	0x0800559d
 8005528:	08005585 	.word	0x08005585
 800552c:	0800559d 	.word	0x0800559d
 8005530:	0800559d 	.word	0x0800559d
 8005534:	0800559d 	.word	0x0800559d
 8005538:	0800559d 	.word	0x0800559d
 800553c:	0800559d 	.word	0x0800559d
 8005540:	0800559d 	.word	0x0800559d
 8005544:	0800559d 	.word	0x0800559d
 8005548:	0800558d 	.word	0x0800558d
 800554c:	0800559d 	.word	0x0800559d
 8005550:	0800559d 	.word	0x0800559d
 8005554:	0800559d 	.word	0x0800559d
 8005558:	0800559d 	.word	0x0800559d
 800555c:	0800559d 	.word	0x0800559d
 8005560:	0800559d 	.word	0x0800559d
 8005564:	0800559d 	.word	0x0800559d
 8005568:	08005595 	.word	0x08005595
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e222      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005574:	2304      	movs	r3, #4
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e21e      	b.n	80059ba <UART_SetConfig+0x5a6>
 800557c:	2308      	movs	r3, #8
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e21a      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005584:	2310      	movs	r3, #16
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e216      	b.n	80059ba <UART_SetConfig+0x5a6>
 800558c:	2320      	movs	r3, #32
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e212      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e20e      	b.n	80059ba <UART_SetConfig+0x5a6>
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e20a      	b.n	80059ba <UART_SetConfig+0x5a6>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a69      	ldr	r2, [pc, #420]	; (8005750 <UART_SetConfig+0x33c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d130      	bne.n	8005610 <UART_SetConfig+0x1fc>
 80055ae:	4b67      	ldr	r3, [pc, #412]	; (800574c <UART_SetConfig+0x338>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d826      	bhi.n	8005608 <UART_SetConfig+0x1f4>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x1ac>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d9 	.word	0x080055d9
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	080055e9 	.word	0x080055e9
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e1ec      	b.n	80059ba <UART_SetConfig+0x5a6>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e1e8      	b.n	80059ba <UART_SetConfig+0x5a6>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e1e4      	b.n	80059ba <UART_SetConfig+0x5a6>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e1e0      	b.n	80059ba <UART_SetConfig+0x5a6>
 80055f8:	2320      	movs	r3, #32
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e1dc      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e1d8      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e1d4      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a4f      	ldr	r2, [pc, #316]	; (8005754 <UART_SetConfig+0x340>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d130      	bne.n	800567c <UART_SetConfig+0x268>
 800561a:	4b4c      	ldr	r3, [pc, #304]	; (800574c <UART_SetConfig+0x338>)
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b05      	cmp	r3, #5
 8005624:	d826      	bhi.n	8005674 <UART_SetConfig+0x260>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0x218>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005645 	.word	0x08005645
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005655 	.word	0x08005655
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	2300      	movs	r3, #0
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564a:	e1b6      	b.n	80059ba <UART_SetConfig+0x5a6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e1b2      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e1ae      	b.n	80059ba <UART_SetConfig+0x5a6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e1aa      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005664:	2320      	movs	r3, #32
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e1a6      	b.n	80059ba <UART_SetConfig+0x5a6>
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e1a2      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e19e      	b.n	80059ba <UART_SetConfig+0x5a6>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a35      	ldr	r2, [pc, #212]	; (8005758 <UART_SetConfig+0x344>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d130      	bne.n	80056e8 <UART_SetConfig+0x2d4>
 8005686:	4b31      	ldr	r3, [pc, #196]	; (800574c <UART_SetConfig+0x338>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b05      	cmp	r3, #5
 8005690:	d826      	bhi.n	80056e0 <UART_SetConfig+0x2cc>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <UART_SetConfig+0x284>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b1 	.word	0x080056b1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c1 	.word	0x080056c1
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e180      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e17c      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e178      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e174      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e170      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e16c      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e168      	b.n	80059ba <UART_SetConfig+0x5a6>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1b      	ldr	r2, [pc, #108]	; (800575c <UART_SetConfig+0x348>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d142      	bne.n	8005778 <UART_SetConfig+0x364>
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <UART_SetConfig+0x338>)
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d838      	bhi.n	8005770 <UART_SetConfig+0x35c>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x2f0>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	0800571d 	.word	0x0800571d
 8005708:	08005725 	.word	0x08005725
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005735 	.word	0x08005735
 8005714:	08005761 	.word	0x08005761
 8005718:	08005769 	.word	0x08005769
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e14a      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e146      	b.n	80059ba <UART_SetConfig+0x5a6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e142      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e13e      	b.n	80059ba <UART_SetConfig+0x5a6>
 800573c:	cfff69f3 	.word	0xcfff69f3
 8005740:	58000c00 	.word	0x58000c00
 8005744:	11fff4ff 	.word	0x11fff4ff
 8005748:	40011000 	.word	0x40011000
 800574c:	58024400 	.word	0x58024400
 8005750:	40004400 	.word	0x40004400
 8005754:	40004800 	.word	0x40004800
 8005758:	40004c00 	.word	0x40004c00
 800575c:	40005000 	.word	0x40005000
 8005760:	2320      	movs	r3, #32
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e128      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005768:	2340      	movs	r3, #64	; 0x40
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e124      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e120      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4acb      	ldr	r2, [pc, #812]	; (8005aac <UART_SetConfig+0x698>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d176      	bne.n	8005870 <UART_SetConfig+0x45c>
 8005782:	4bcb      	ldr	r3, [pc, #812]	; (8005ab0 <UART_SetConfig+0x69c>)
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800578a:	2b28      	cmp	r3, #40	; 0x28
 800578c:	d86c      	bhi.n	8005868 <UART_SetConfig+0x454>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0x380>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	08005839 	.word	0x08005839
 8005798:	08005869 	.word	0x08005869
 800579c:	08005869 	.word	0x08005869
 80057a0:	08005869 	.word	0x08005869
 80057a4:	08005869 	.word	0x08005869
 80057a8:	08005869 	.word	0x08005869
 80057ac:	08005869 	.word	0x08005869
 80057b0:	08005869 	.word	0x08005869
 80057b4:	08005841 	.word	0x08005841
 80057b8:	08005869 	.word	0x08005869
 80057bc:	08005869 	.word	0x08005869
 80057c0:	08005869 	.word	0x08005869
 80057c4:	08005869 	.word	0x08005869
 80057c8:	08005869 	.word	0x08005869
 80057cc:	08005869 	.word	0x08005869
 80057d0:	08005869 	.word	0x08005869
 80057d4:	08005849 	.word	0x08005849
 80057d8:	08005869 	.word	0x08005869
 80057dc:	08005869 	.word	0x08005869
 80057e0:	08005869 	.word	0x08005869
 80057e4:	08005869 	.word	0x08005869
 80057e8:	08005869 	.word	0x08005869
 80057ec:	08005869 	.word	0x08005869
 80057f0:	08005869 	.word	0x08005869
 80057f4:	08005851 	.word	0x08005851
 80057f8:	08005869 	.word	0x08005869
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005869 	.word	0x08005869
 8005804:	08005869 	.word	0x08005869
 8005808:	08005869 	.word	0x08005869
 800580c:	08005869 	.word	0x08005869
 8005810:	08005869 	.word	0x08005869
 8005814:	08005859 	.word	0x08005859
 8005818:	08005869 	.word	0x08005869
 800581c:	08005869 	.word	0x08005869
 8005820:	08005869 	.word	0x08005869
 8005824:	08005869 	.word	0x08005869
 8005828:	08005869 	.word	0x08005869
 800582c:	08005869 	.word	0x08005869
 8005830:	08005869 	.word	0x08005869
 8005834:	08005861 	.word	0x08005861
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e0bc      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e0b8      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e0b4      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e0b0      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e0ac      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e0a8      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e0a4      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a8f      	ldr	r2, [pc, #572]	; (8005ab4 <UART_SetConfig+0x6a0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d130      	bne.n	80058dc <UART_SetConfig+0x4c8>
 800587a:	4b8d      	ldr	r3, [pc, #564]	; (8005ab0 <UART_SetConfig+0x69c>)
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b05      	cmp	r3, #5
 8005884:	d826      	bhi.n	80058d4 <UART_SetConfig+0x4c0>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x478>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058a5 	.word	0x080058a5
 8005890:	080058ad 	.word	0x080058ad
 8005894:	080058b5 	.word	0x080058b5
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e086      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e082      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e07e      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e07a      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058c4:	2320      	movs	r3, #32
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e076      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e072      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e06e      	b.n	80059ba <UART_SetConfig+0x5a6>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a75      	ldr	r2, [pc, #468]	; (8005ab8 <UART_SetConfig+0x6a4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <UART_SetConfig+0x534>
 80058e6:	4b72      	ldr	r3, [pc, #456]	; (8005ab0 <UART_SetConfig+0x69c>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d826      	bhi.n	8005940 <UART_SetConfig+0x52c>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x4e4>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005911 	.word	0x08005911
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005921 	.word	0x08005921
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005916:	e050      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e04c      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e048      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e044      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e040      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e03c      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e038      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5b      	ldr	r2, [pc, #364]	; (8005abc <UART_SetConfig+0x6a8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d130      	bne.n	80059b4 <UART_SetConfig+0x5a0>
 8005952:	4b57      	ldr	r3, [pc, #348]	; (8005ab0 <UART_SetConfig+0x69c>)
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d826      	bhi.n	80059ac <UART_SetConfig+0x598>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x550>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	2302      	movs	r3, #2
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e01a      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e016      	b.n	80059ba <UART_SetConfig+0x5a6>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e012      	b.n	80059ba <UART_SetConfig+0x5a6>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e00e      	b.n	80059ba <UART_SetConfig+0x5a6>
 800599c:	2320      	movs	r3, #32
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e00a      	b.n	80059ba <UART_SetConfig+0x5a6>
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059aa:	e006      	b.n	80059ba <UART_SetConfig+0x5a6>
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b2:	e002      	b.n	80059ba <UART_SetConfig+0x5a6>
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3f      	ldr	r2, [pc, #252]	; (8005abc <UART_SetConfig+0x6a8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	f040 80f8 	bne.w	8005bb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	dc46      	bgt.n	8005a5c <UART_SetConfig+0x648>
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	f2c0 8082 	blt.w	8005ad8 <UART_SetConfig+0x6c4>
 80059d4:	3b02      	subs	r3, #2
 80059d6:	2b1e      	cmp	r3, #30
 80059d8:	d87e      	bhi.n	8005ad8 <UART_SetConfig+0x6c4>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x5cc>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a63 	.word	0x08005a63
 80059e4:	08005ad9 	.word	0x08005ad9
 80059e8:	08005a6b 	.word	0x08005a6b
 80059ec:	08005ad9 	.word	0x08005ad9
 80059f0:	08005ad9 	.word	0x08005ad9
 80059f4:	08005ad9 	.word	0x08005ad9
 80059f8:	08005a7b 	.word	0x08005a7b
 80059fc:	08005ad9 	.word	0x08005ad9
 8005a00:	08005ad9 	.word	0x08005ad9
 8005a04:	08005ad9 	.word	0x08005ad9
 8005a08:	08005ad9 	.word	0x08005ad9
 8005a0c:	08005ad9 	.word	0x08005ad9
 8005a10:	08005ad9 	.word	0x08005ad9
 8005a14:	08005ad9 	.word	0x08005ad9
 8005a18:	08005a8b 	.word	0x08005a8b
 8005a1c:	08005ad9 	.word	0x08005ad9
 8005a20:	08005ad9 	.word	0x08005ad9
 8005a24:	08005ad9 	.word	0x08005ad9
 8005a28:	08005ad9 	.word	0x08005ad9
 8005a2c:	08005ad9 	.word	0x08005ad9
 8005a30:	08005ad9 	.word	0x08005ad9
 8005a34:	08005ad9 	.word	0x08005ad9
 8005a38:	08005ad9 	.word	0x08005ad9
 8005a3c:	08005ad9 	.word	0x08005ad9
 8005a40:	08005ad9 	.word	0x08005ad9
 8005a44:	08005ad9 	.word	0x08005ad9
 8005a48:	08005ad9 	.word	0x08005ad9
 8005a4c:	08005ad9 	.word	0x08005ad9
 8005a50:	08005ad9 	.word	0x08005ad9
 8005a54:	08005ad9 	.word	0x08005ad9
 8005a58:	08005acb 	.word	0x08005acb
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d037      	beq.n	8005ad0 <UART_SetConfig+0x6bc>
 8005a60:	e03a      	b.n	8005ad8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a62:	f7fe fc6b 	bl	800433c <HAL_RCCEx_GetD3PCLK1Freq>
 8005a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a68:	e03c      	b.n	8005ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fc7a 	bl	8004368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a78:	e034      	b.n	8005ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a7a:	f107 0318 	add.w	r3, r7, #24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fdc6 	bl	8004610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a88:	e02c      	b.n	8005ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <UART_SetConfig+0x69c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <UART_SetConfig+0x69c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	08db      	lsrs	r3, r3, #3
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <UART_SetConfig+0x6ac>)
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa8:	e01c      	b.n	8005ae4 <UART_SetConfig+0x6d0>
 8005aaa:	bf00      	nop
 8005aac:	40011400 	.word	0x40011400
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	40007800 	.word	0x40007800
 8005ab8:	40007c00 	.word	0x40007c00
 8005abc:	58000c00 	.word	0x58000c00
 8005ac0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005ac4:	4b9d      	ldr	r3, [pc, #628]	; (8005d3c <UART_SetConfig+0x928>)
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ac8:	e00c      	b.n	8005ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aca:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <UART_SetConfig+0x92c>)
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ace:	e009      	b.n	8005ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad6:	e005      	b.n	8005ae4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ae2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 81de 	beq.w	8005ea8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	4a94      	ldr	r2, [pc, #592]	; (8005d44 <UART_SetConfig+0x930>)
 8005af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af6:	461a      	mov	r2, r3
 8005af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005afe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d305      	bcc.n	8005b1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d903      	bls.n	8005b24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b22:	e1c1      	b.n	8005ea8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b26:	2200      	movs	r2, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	60fa      	str	r2, [r7, #12]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	4a84      	ldr	r2, [pc, #528]	; (8005d44 <UART_SetConfig+0x930>)
 8005b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2200      	movs	r2, #0
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b46:	f7fa fbcb 	bl	80002e0 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	020b      	lsls	r3, r1, #8
 8005b5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b60:	0202      	lsls	r2, r0, #8
 8005b62:	6979      	ldr	r1, [r7, #20]
 8005b64:	6849      	ldr	r1, [r1, #4]
 8005b66:	0849      	lsrs	r1, r1, #1
 8005b68:	2000      	movs	r0, #0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	eb12 0804 	adds.w	r8, r2, r4
 8005b72:	eb43 0905 	adc.w	r9, r3, r5
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	469a      	mov	sl, r3
 8005b7e:	4693      	mov	fp, r2
 8005b80:	4652      	mov	r2, sl
 8005b82:	465b      	mov	r3, fp
 8005b84:	4640      	mov	r0, r8
 8005b86:	4649      	mov	r1, r9
 8005b88:	f7fa fbaa 	bl	80002e0 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9a:	d308      	bcc.n	8005bae <UART_SetConfig+0x79a>
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba2:	d204      	bcs.n	8005bae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	e17c      	b.n	8005ea8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bb4:	e178      	b.n	8005ea8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	f040 80c5 	bne.w	8005d4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005bc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	dc48      	bgt.n	8005c5c <UART_SetConfig+0x848>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	db7b      	blt.n	8005cc6 <UART_SetConfig+0x8b2>
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d879      	bhi.n	8005cc6 <UART_SetConfig+0x8b2>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x7c4>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c63 	.word	0x08005c63
 8005bdc:	08005c6b 	.word	0x08005c6b
 8005be0:	08005cc7 	.word	0x08005cc7
 8005be4:	08005cc7 	.word	0x08005cc7
 8005be8:	08005c73 	.word	0x08005c73
 8005bec:	08005cc7 	.word	0x08005cc7
 8005bf0:	08005cc7 	.word	0x08005cc7
 8005bf4:	08005cc7 	.word	0x08005cc7
 8005bf8:	08005c83 	.word	0x08005c83
 8005bfc:	08005cc7 	.word	0x08005cc7
 8005c00:	08005cc7 	.word	0x08005cc7
 8005c04:	08005cc7 	.word	0x08005cc7
 8005c08:	08005cc7 	.word	0x08005cc7
 8005c0c:	08005cc7 	.word	0x08005cc7
 8005c10:	08005cc7 	.word	0x08005cc7
 8005c14:	08005cc7 	.word	0x08005cc7
 8005c18:	08005c93 	.word	0x08005c93
 8005c1c:	08005cc7 	.word	0x08005cc7
 8005c20:	08005cc7 	.word	0x08005cc7
 8005c24:	08005cc7 	.word	0x08005cc7
 8005c28:	08005cc7 	.word	0x08005cc7
 8005c2c:	08005cc7 	.word	0x08005cc7
 8005c30:	08005cc7 	.word	0x08005cc7
 8005c34:	08005cc7 	.word	0x08005cc7
 8005c38:	08005cc7 	.word	0x08005cc7
 8005c3c:	08005cc7 	.word	0x08005cc7
 8005c40:	08005cc7 	.word	0x08005cc7
 8005c44:	08005cc7 	.word	0x08005cc7
 8005c48:	08005cc7 	.word	0x08005cc7
 8005c4c:	08005cc7 	.word	0x08005cc7
 8005c50:	08005cc7 	.word	0x08005cc7
 8005c54:	08005cc7 	.word	0x08005cc7
 8005c58:	08005cb9 	.word	0x08005cb9
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d02e      	beq.n	8005cbe <UART_SetConfig+0x8aa>
 8005c60:	e031      	b.n	8005cc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c62:	f7fd fbb7 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005c66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c68:	e033      	b.n	8005cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c6a:	f7fd fbc9 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8005c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c70:	e02f      	b.n	8005cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fb76 	bl	8004368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c80:	e027      	b.n	8005cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c82:	f107 0318 	add.w	r3, r7, #24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fcc2 	bl	8004610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c90:	e01f      	b.n	8005cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c92:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <UART_SetConfig+0x934>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <UART_SetConfig+0x934>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	08db      	lsrs	r3, r3, #3
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <UART_SetConfig+0x928>)
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb0:	e00f      	b.n	8005cd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cb2:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <UART_SetConfig+0x928>)
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb6:	e00c      	b.n	8005cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cb8:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <UART_SetConfig+0x92c>)
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbc:	e009      	b.n	8005cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc4:	e005      	b.n	8005cd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80e7 	beq.w	8005ea8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <UART_SetConfig+0x930>)
 8005ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cec:	005a      	lsls	r2, r3, #1
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	441a      	add	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	2b0f      	cmp	r3, #15
 8005d04:	d916      	bls.n	8005d34 <UART_SetConfig+0x920>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d212      	bcs.n	8005d34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f023 030f 	bic.w	r3, r3, #15
 8005d16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d26:	4313      	orrs	r3, r2
 8005d28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	e0b9      	b.n	8005ea8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d3a:	e0b5      	b.n	8005ea8 <UART_SetConfig+0xa94>
 8005d3c:	03d09000 	.word	0x03d09000
 8005d40:	003d0900 	.word	0x003d0900
 8005d44:	08009928 	.word	0x08009928
 8005d48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	dc49      	bgt.n	8005de8 <UART_SetConfig+0x9d4>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db7c      	blt.n	8005e52 <UART_SetConfig+0xa3e>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d87a      	bhi.n	8005e52 <UART_SetConfig+0xa3e>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0x950>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005def 	.word	0x08005def
 8005d68:	08005df7 	.word	0x08005df7
 8005d6c:	08005e53 	.word	0x08005e53
 8005d70:	08005e53 	.word	0x08005e53
 8005d74:	08005dff 	.word	0x08005dff
 8005d78:	08005e53 	.word	0x08005e53
 8005d7c:	08005e53 	.word	0x08005e53
 8005d80:	08005e53 	.word	0x08005e53
 8005d84:	08005e0f 	.word	0x08005e0f
 8005d88:	08005e53 	.word	0x08005e53
 8005d8c:	08005e53 	.word	0x08005e53
 8005d90:	08005e53 	.word	0x08005e53
 8005d94:	08005e53 	.word	0x08005e53
 8005d98:	08005e53 	.word	0x08005e53
 8005d9c:	08005e53 	.word	0x08005e53
 8005da0:	08005e53 	.word	0x08005e53
 8005da4:	08005e1f 	.word	0x08005e1f
 8005da8:	08005e53 	.word	0x08005e53
 8005dac:	08005e53 	.word	0x08005e53
 8005db0:	08005e53 	.word	0x08005e53
 8005db4:	08005e53 	.word	0x08005e53
 8005db8:	08005e53 	.word	0x08005e53
 8005dbc:	08005e53 	.word	0x08005e53
 8005dc0:	08005e53 	.word	0x08005e53
 8005dc4:	08005e53 	.word	0x08005e53
 8005dc8:	08005e53 	.word	0x08005e53
 8005dcc:	08005e53 	.word	0x08005e53
 8005dd0:	08005e53 	.word	0x08005e53
 8005dd4:	08005e53 	.word	0x08005e53
 8005dd8:	08005e53 	.word	0x08005e53
 8005ddc:	08005e53 	.word	0x08005e53
 8005de0:	08005e53 	.word	0x08005e53
 8005de4:	08005e45 	.word	0x08005e45
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d02e      	beq.n	8005e4a <UART_SetConfig+0xa36>
 8005dec:	e031      	b.n	8005e52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7fd faf1 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005df2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005df4:	e033      	b.n	8005e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df6:	f7fd fb03 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8005dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dfc:	e02f      	b.n	8005e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fab0 	bl	8004368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e0c:	e027      	b.n	8005e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e0e:	f107 0318 	add.w	r3, r7, #24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe fbfc 	bl	8004610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e1c:	e01f      	b.n	8005e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <UART_SetConfig+0xac0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <UART_SetConfig+0xac0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <UART_SetConfig+0xac4>)
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e3c:	e00f      	b.n	8005e5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005e3e:	4b26      	ldr	r3, [pc, #152]	; (8005ed8 <UART_SetConfig+0xac4>)
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e42:	e00c      	b.n	8005e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <UART_SetConfig+0xac8>)
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e48:	e009      	b.n	8005e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e50:	e005      	b.n	8005e5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d021      	beq.n	8005ea8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <UART_SetConfig+0xacc>)
 8005e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e72:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	441a      	add	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d909      	bls.n	8005ea2 <UART_SetConfig+0xa8e>
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d205      	bcs.n	8005ea2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60da      	str	r2, [r3, #12]
 8005ea0:	e002      	b.n	8005ea8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ec4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3748      	adds	r7, #72	; 0x48
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed2:	bf00      	nop
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	03d09000 	.word	0x03d09000
 8005edc:	003d0900 	.word	0x003d0900
 8005ee0:	08009928 	.word	0x08009928

08005ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe2:	d10a      	bne.n	8005ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af02      	add	r7, sp, #8
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006038:	f7fb f98e 	bl	8001358 <HAL_GetTick>
 800603c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d10e      	bne.n	800606a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800604c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f82f 	bl	80060be <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e025      	b.n	80060b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b04      	cmp	r3, #4
 8006076:	d10e      	bne.n	8006096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f819 	bl	80060be <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e00f      	b.n	80060b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b09c      	sub	sp, #112	; 0x70
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ce:	e0a9      	b.n	8006224 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	f000 80a5 	beq.w	8006224 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060da:	f7fb f93d 	bl	8001358 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80060ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d140      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006104:	667b      	str	r3, [r7, #100]	; 0x64
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006110:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800611c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3308      	adds	r3, #8
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	663b      	str	r3, [r7, #96]	; 0x60
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3308      	adds	r3, #8
 8006140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006142:	64ba      	str	r2, [r7, #72]	; 0x48
 8006144:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e069      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d051      	beq.n	8006224 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618e:	d149      	bne.n	8006224 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006198:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	613b      	str	r3, [r7, #16]
   return(result);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061ec:	623a      	str	r2, [r7, #32]
 80061ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	69f9      	ldr	r1, [r7, #28]
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e010      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4013      	ands	r3, r2
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	429a      	cmp	r2, r3
 8006240:	f43f af46 	beq.w	80060d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3770      	adds	r7, #112	; 0x70
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_UARTEx_DisableFifoMode+0x16>
 8006260:	2302      	movs	r3, #2
 8006262:	e027      	b.n	80062b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0201 	bic.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006292:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e02d      	b.n	8006334 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2224      	movs	r2, #36	; 0x24
 80062e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f84f 	bl	80063b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e02d      	b.n	80063b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2224      	movs	r2, #36	; 0x24
 8006360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f811 	bl	80063b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063d8:	e031      	b.n	800643e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063da:	2310      	movs	r3, #16
 80063dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063de:	2310      	movs	r3, #16
 80063e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	0e5b      	lsrs	r3, r3, #25
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	0f5b      	lsrs	r3, r3, #29
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	7b3a      	ldrb	r2, [r7, #12]
 8006406:	4911      	ldr	r1, [pc, #68]	; (800644c <UARTEx_SetNbDataToProcess+0x94>)
 8006408:	5c8a      	ldrb	r2, [r1, r2]
 800640a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800640e:	7b3a      	ldrb	r2, [r7, #12]
 8006410:	490f      	ldr	r1, [pc, #60]	; (8006450 <UARTEx_SetNbDataToProcess+0x98>)
 8006412:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006414:	fb93 f3f2 	sdiv	r3, r3, r2
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	7b7a      	ldrb	r2, [r7, #13]
 8006424:	4909      	ldr	r1, [pc, #36]	; (800644c <UARTEx_SetNbDataToProcess+0x94>)
 8006426:	5c8a      	ldrb	r2, [r1, r2]
 8006428:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800642c:	7b7a      	ldrb	r2, [r7, #13]
 800642e:	4908      	ldr	r1, [pc, #32]	; (8006450 <UARTEx_SetNbDataToProcess+0x98>)
 8006430:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006432:	fb93 f3f2 	sdiv	r3, r3, r2
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	08009940 	.word	0x08009940
 8006450:	08009948 	.word	0x08009948

08006454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006454:	b084      	sub	sp, #16
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	f107 001c 	add.w	r0, r7, #28
 8006462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b01      	cmp	r3, #1
 800646a:	d120      	bne.n	80064ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <USB_CoreInit+0xd4>)
 800647e:	4013      	ands	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 faac 	bl	8006a00 <USB_CoreReset>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	e01a      	b.n	80064e4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 faa0 	bl	8006a00 <USB_CoreReset>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
 80064d6:	e005      	b.n	80064e4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d116      	bne.n	8006518 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <USB_CoreInit+0xd8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f043 0206 	orr.w	r2, r3, #6
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f043 0220 	orr.w	r2, r3, #32
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006524:	b004      	add	sp, #16
 8006526:	4770      	bx	lr
 8006528:	ffbdffbf 	.word	0xffbdffbf
 800652c:	03ee0000 	.word	0x03ee0000

08006530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 0201 	bic.w	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	460b      	mov	r3, r1
 800655c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d115      	bne.n	80065a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006580:	2001      	movs	r0, #1
 8006582:	f7fa fef5 	bl	8001370 <HAL_Delay>
      ms++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa29 	bl	80069e4 <USB_GetMode>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d01e      	beq.n	80065d6 <USB_SetCurrentMode+0x84>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b31      	cmp	r3, #49	; 0x31
 800659c:	d9f0      	bls.n	8006580 <USB_SetCurrentMode+0x2e>
 800659e:	e01a      	b.n	80065d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d115      	bne.n	80065d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065b2:	2001      	movs	r0, #1
 80065b4:	f7fa fedc 	bl	8001370 <HAL_Delay>
      ms++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa10 	bl	80069e4 <USB_GetMode>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <USB_SetCurrentMode+0x84>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b31      	cmp	r3, #49	; 0x31
 80065ce:	d9f0      	bls.n	80065b2 <USB_SetCurrentMode+0x60>
 80065d0:	e001      	b.n	80065d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e005      	b.n	80065e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b32      	cmp	r3, #50	; 0x32
 80065da:	d101      	bne.n	80065e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065ec:	b084      	sub	sp, #16
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b086      	sub	sp, #24
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	e009      	b.n	8006620 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3340      	adds	r3, #64	; 0x40
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3301      	adds	r3, #1
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b0e      	cmp	r3, #14
 8006624:	d9f2      	bls.n	800660c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d11c      	bne.n	8006666 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800663a:	f043 0302 	orr.w	r3, r3, #2
 800663e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e005      	b.n	8006672 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	4619      	mov	r1, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668c:	461a      	mov	r2, r3
 800668e:	680b      	ldr	r3, [r1, #0]
 8006690:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10c      	bne.n	80066b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f965 	bl	8006970 <USB_SetDevSpeed>
 80066a6:	e008      	b.n	80066ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066a8:	2101      	movs	r1, #1
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f960 	bl	8006970 <USB_SetDevSpeed>
 80066b0:	e003      	b.n	80066ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066b2:	2103      	movs	r1, #3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f95b 	bl	8006970 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066ba:	2110      	movs	r1, #16
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8f3 	bl	80068a8 <USB_FlushTxFifo>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f91f 	bl	8006910 <USB_FlushRxFifo>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e2:	461a      	mov	r2, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	461a      	mov	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	e043      	b.n	800678e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800671c:	d118      	bne.n	8006750 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	461a      	mov	r2, r3
 8006732:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	e013      	b.n	8006762 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	461a      	mov	r2, r3
 8006748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e008      	b.n	8006762 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	461a      	mov	r2, r3
 8006782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006786:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	3301      	adds	r3, #1
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	429a      	cmp	r2, r3
 8006794:	d3b7      	bcc.n	8006706 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	e043      	b.n	8006824 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b2:	d118      	bne.n	80067e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e013      	b.n	80067f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e008      	b.n	80067f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	461a      	mov	r2, r3
 80067f4:	2300      	movs	r3, #0
 80067f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006804:	461a      	mov	r2, r3
 8006806:	2300      	movs	r3, #0
 8006808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800681c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3301      	adds	r3, #1
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d3b7      	bcc.n	800679c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800683e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800684c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f043 0210 	orr.w	r2, r3, #16
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699a      	ldr	r2, [r3, #24]
 8006864:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <USB_DevInit+0x2b4>)
 8006866:	4313      	orrs	r3, r2
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800686c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f043 0208 	orr.w	r2, r3, #8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d105      	bne.n	8006890 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <USB_DevInit+0x2b8>)
 800688a:	4313      	orrs	r3, r2
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800689c:	b004      	add	sp, #16
 800689e:	4770      	bx	lr
 80068a0:	803c3800 	.word	0x803c3800
 80068a4:	40000004 	.word	0x40000004

080068a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a13      	ldr	r2, [pc, #76]	; (800690c <USB_FlushTxFifo+0x64>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d901      	bls.n	80068c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e01b      	b.n	8006900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	daf2      	bge.n	80068b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	019b      	lsls	r3, r3, #6
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <USB_FlushTxFifo+0x64>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e006      	b.n	8006900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d0f0      	beq.n	80068e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	00030d40 	.word	0x00030d40

08006910 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a11      	ldr	r2, [pc, #68]	; (800696c <USB_FlushRxFifo+0x5c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d901      	bls.n	800692e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e018      	b.n	8006960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	daf2      	bge.n	800691c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2210      	movs	r2, #16
 800693e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <USB_FlushRxFifo+0x5c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e006      	b.n	8006960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b10      	cmp	r3, #16
 800695c:	d0f0      	beq.n	8006940 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	00030d40 	.word	0x00030d40

08006970 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0301 	and.w	r3, r3, #1
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <USB_CoreReset+0x64>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e01b      	b.n	8006a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	daf2      	bge.n	8006a0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <USB_CoreReset+0x64>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d901      	bls.n	8006a48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e006      	b.n	8006a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d0f0      	beq.n	8006a36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	00030d40 	.word	0x00030d40

08006a68 <__NVIC_SetPriority>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	6039      	str	r1, [r7, #0]
 8006a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	db0a      	blt.n	8006a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	490c      	ldr	r1, [pc, #48]	; (8006ab4 <__NVIC_SetPriority+0x4c>)
 8006a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a86:	0112      	lsls	r2, r2, #4
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a90:	e00a      	b.n	8006aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4908      	ldr	r1, [pc, #32]	; (8006ab8 <__NVIC_SetPriority+0x50>)
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	3b04      	subs	r3, #4
 8006aa0:	0112      	lsls	r2, r2, #4
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	761a      	strb	r2, [r3, #24]
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	e000e100 	.word	0xe000e100
 8006ab8:	e000ed00 	.word	0xe000ed00

08006abc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <SysTick_Handler+0x1c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ac4:	f001 fd28 	bl	8008518 <xTaskGetSchedulerState>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d001      	beq.n	8006ad2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ace:	f002 fb13 	bl	80090f8 <xPortSysTickHandler>
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	e000e010 	.word	0xe000e010

08006adc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f06f 0004 	mvn.w	r0, #4
 8006ae6:	f7ff ffbf 	bl	8006a68 <__NVIC_SetPriority>
#endif
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af6:	f3ef 8305 	mrs	r3, IPSR
 8006afa:	603b      	str	r3, [r7, #0]
  return(result);
 8006afc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006b02:	f06f 0305 	mvn.w	r3, #5
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	e00c      	b.n	8006b24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <osKernelInitialize+0x44>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b12:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <osKernelInitialize+0x44>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	607b      	str	r3, [r7, #4]
 8006b1c:	e002      	b.n	8006b24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b24:	687b      	ldr	r3, [r7, #4]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	240008bc 	.word	0x240008bc

08006b38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b3e:	f3ef 8305 	mrs	r3, IPSR
 8006b42:	603b      	str	r3, [r7, #0]
  return(result);
 8006b44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b4a:	f06f 0305 	mvn.w	r3, #5
 8006b4e:	607b      	str	r3, [r7, #4]
 8006b50:	e010      	b.n	8006b74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <osKernelStart+0x48>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d109      	bne.n	8006b6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b5a:	f7ff ffbf 	bl	8006adc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b5e:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <osKernelStart+0x48>)
 8006b60:	2202      	movs	r2, #2
 8006b62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b64:	f001 f87c 	bl	8007c60 <vTaskStartScheduler>
      stat = osOK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	e002      	b.n	8006b74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b74:	687b      	ldr	r3, [r7, #4]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	240008bc 	.word	0x240008bc

08006b84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af04      	add	r7, sp, #16
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b94:	f3ef 8305 	mrs	r3, IPSR
 8006b98:	617b      	str	r3, [r7, #20]
  return(result);
 8006b9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d17e      	bne.n	8006c9e <osThreadNew+0x11a>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d07b      	beq.n	8006c9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006baa:	2318      	movs	r3, #24
 8006bac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d045      	beq.n	8006c4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <osThreadNew+0x48>
        name = attr->name;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <osThreadNew+0x6e>
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	2b38      	cmp	r3, #56	; 0x38
 8006be4:	d805      	bhi.n	8006bf2 <osThreadNew+0x6e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <osThreadNew+0x72>
        return (NULL);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e054      	b.n	8006ca0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	089b      	lsrs	r3, r3, #2
 8006c04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <osThreadNew+0xa8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2bbb      	cmp	r3, #187	; 0xbb
 8006c14:	d90a      	bls.n	8006c2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <osThreadNew+0xa8>
        mem = 1;
 8006c26:	2301      	movs	r3, #1
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e010      	b.n	8006c4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10c      	bne.n	8006c4e <osThreadNew+0xca>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d108      	bne.n	8006c4e <osThreadNew+0xca>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <osThreadNew+0xca>
          mem = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	e001      	b.n	8006c4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d110      	bne.n	8006c76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c5c:	9202      	str	r2, [sp, #8]
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6a3a      	ldr	r2, [r7, #32]
 8006c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fe0c 	bl	8007888 <xTaskCreateStatic>
 8006c70:	4603      	mov	r3, r0
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	e013      	b.n	8006c9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d110      	bne.n	8006c9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f107 0310 	add.w	r3, r7, #16
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fe57 	bl	8007942 <xTaskCreate>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d001      	beq.n	8006c9e <osThreadNew+0x11a>
            hTask = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c9e:	693b      	ldr	r3, [r7, #16]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3728      	adds	r7, #40	; 0x28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cb0:	f3ef 8305 	mrs	r3, IPSR
 8006cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <osDelay+0x1c>
    stat = osErrorISR;
 8006cbc:	f06f 0305 	mvn.w	r3, #5
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e007      	b.n	8006cd4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 ff92 	bl	8007bf8 <vTaskDelay>
    }
  }

  return (stat);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a07      	ldr	r2, [pc, #28]	; (8006d0c <vApplicationGetIdleTaskMemory+0x2c>)
 8006cf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4a06      	ldr	r2, [pc, #24]	; (8006d10 <vApplicationGetIdleTaskMemory+0x30>)
 8006cf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2280      	movs	r2, #128	; 0x80
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	240008c0 	.word	0x240008c0
 8006d10:	2400097c 	.word	0x2400097c

08006d14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a07      	ldr	r2, [pc, #28]	; (8006d40 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4a06      	ldr	r2, [pc, #24]	; (8006d44 <vApplicationGetTimerTaskMemory+0x30>)
 8006d2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d32:	601a      	str	r2, [r3, #0]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	24000b7c 	.word	0x24000b7c
 8006d44:	24000c38 	.word	0x24000c38

08006d48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f103 0208 	add.w	r2, r3, #8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f103 0208 	add.w	r2, r3, #8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f103 0208 	add.w	r2, r3, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
}
 8006dde:	bf00      	nop
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d103      	bne.n	8006e0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e00c      	b.n	8006e24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e002      	b.n	8006e18 <vListInsert+0x2e>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d2f6      	bcs.n	8006e12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6892      	ldr	r2, [r2, #8]
 8006e72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6852      	ldr	r2, [r2, #4]
 8006e7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d103      	bne.n	8006e90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	1e5a      	subs	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006eda:	f002 f87b 	bl	8008fd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee6:	68f9      	ldr	r1, [r7, #12]
 8006ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	441a      	add	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	68f9      	ldr	r1, [r7, #12]
 8006f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	22ff      	movs	r2, #255	; 0xff
 8006f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d114      	bne.n	8006f5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01a      	beq.n	8006f6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3310      	adds	r3, #16
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 f929 	bl	8008194 <xTaskRemoveFromEventList>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <xQueueGenericReset+0xcc>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	e009      	b.n	8006f6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3310      	adds	r3, #16
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff fef2 	bl	8006d48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3324      	adds	r3, #36	; 0x24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff feed 	bl	8006d48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f6e:	f002 f861 	bl	8009034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f72:	2301      	movs	r3, #1
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <xQueueGenericCreateStatic+0x52>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <xQueueGenericCreateStatic+0x56>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueGenericCreateStatic+0x58>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	623b      	str	r3, [r7, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <xQueueGenericCreateStatic+0x7e>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <xQueueGenericCreateStatic+0x82>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <xQueueGenericCreateStatic+0x84>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	61fb      	str	r3, [r7, #28]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800701e:	2350      	movs	r3, #80	; 0x50
 8007020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b50      	cmp	r3, #80	; 0x50
 8007026:	d00a      	beq.n	800703e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	61bb      	str	r3, [r7, #24]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800703e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00d      	beq.n	8007066 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007052:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4613      	mov	r3, r2
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	68b9      	ldr	r1, [r7, #8]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f805 	bl	8007070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007068:	4618      	mov	r0, r3
 800706a:	3730      	adds	r7, #48	; 0x30
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e002      	b.n	8007092 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800709e:	2101      	movs	r1, #1
 80070a0:	69b8      	ldr	r0, [r7, #24]
 80070a2:	f7ff ff05 	bl	8006eb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08e      	sub	sp, #56	; 0x38
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070c6:	2300      	movs	r3, #0
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xQueueGenericSend+0x32>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <xQueueGenericSend+0x40>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <xQueueGenericSend+0x44>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <xQueueGenericSend+0x46>
 80070fc:	2300      	movs	r3, #0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <xQueueGenericSend+0x60>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d103      	bne.n	8007126 <xQueueGenericSend+0x6e>
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <xQueueGenericSend+0x72>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericSend+0x74>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <xQueueGenericSend+0x8e>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	623b      	str	r3, [r7, #32]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007146:	f001 f9e7 	bl	8008518 <xTaskGetSchedulerState>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <xQueueGenericSend+0x9e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <xQueueGenericSend+0xa2>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <xQueueGenericSend+0xa4>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xQueueGenericSend+0xbe>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	61fb      	str	r3, [r7, #28]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007176:	f001 ff2d 	bl	8008fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	429a      	cmp	r2, r3
 8007184:	d302      	bcc.n	800718c <xQueueGenericSend+0xd4>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d129      	bne.n	80071e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007192:	f000 fa0b 	bl	80075ac <prvCopyDataToQueue>
 8007196:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d010      	beq.n	80071c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	3324      	adds	r3, #36	; 0x24
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fff5 	bl	8008194 <xTaskRemoveFromEventList>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d013      	beq.n	80071d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071b0:	4b3f      	ldr	r3, [pc, #252]	; (80072b0 <xQueueGenericSend+0x1f8>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	e00a      	b.n	80071d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071c8:	4b39      	ldr	r3, [pc, #228]	; (80072b0 <xQueueGenericSend+0x1f8>)
 80071ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071d8:	f001 ff2c 	bl	8009034 <vPortExitCritical>
				return pdPASS;
 80071dc:	2301      	movs	r3, #1
 80071de:	e063      	b.n	80072a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071e6:	f001 ff25 	bl	8009034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e05c      	b.n	80072a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071f4:	f107 0314 	add.w	r3, r7, #20
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 f82f 	bl	800825c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071fe:	2301      	movs	r3, #1
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007202:	f001 ff17 	bl	8009034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007206:	f000 fd9b 	bl	8007d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800720a:	f001 fee3 	bl	8008fd4 <vPortEnterCritical>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007214:	b25b      	sxtb	r3, r3
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d103      	bne.n	8007224 <xQueueGenericSend+0x16c>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800722a:	b25b      	sxtb	r3, r3
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d103      	bne.n	800723a <xQueueGenericSend+0x182>
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800723a:	f001 fefb 	bl	8009034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800723e:	1d3a      	adds	r2, r7, #4
 8007240:	f107 0314 	add.w	r3, r7, #20
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f81e 	bl	8008288 <xTaskCheckForTimeOut>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d124      	bne.n	800729c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007254:	f000 faa2 	bl	800779c <prvIsQueueFull>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d018      	beq.n	8007290 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	3310      	adds	r3, #16
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f000 ff44 	bl	80080f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800726c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800726e:	f000 fa2d 	bl	80076cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007272:	f000 fd73 	bl	8007d5c <xTaskResumeAll>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	f47f af7c 	bne.w	8007176 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <xQueueGenericSend+0x1f8>)
 8007280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	e772      	b.n	8007176 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007292:	f000 fa1b 	bl	80076cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007296:	f000 fd61 	bl	8007d5c <xTaskResumeAll>
 800729a:	e76c      	b.n	8007176 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800729c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800729e:	f000 fa15 	bl	80076cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072a2:	f000 fd5b 	bl	8007d5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3738      	adds	r7, #56	; 0x38
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	e000ed04 	.word	0xe000ed04

080072b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b090      	sub	sp, #64	; 0x40
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d103      	bne.n	80072f0 <xQueueGenericSendFromISR+0x3c>
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <xQueueGenericSendFromISR+0x40>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <xQueueGenericSendFromISR+0x42>
 80072f4:	2300      	movs	r3, #0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d103      	bne.n	800731e <xQueueGenericSendFromISR+0x6a>
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <xQueueGenericSendFromISR+0x6e>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <xQueueGenericSendFromISR+0x70>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	623b      	str	r3, [r7, #32]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800733e:	f001 ff2b 	bl	8009198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007342:	f3ef 8211 	mrs	r2, BASEPRI
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	61fa      	str	r2, [r7, #28]
 8007358:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800735a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <xQueueGenericSendFromISR+0xbc>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d12f      	bne.n	80073d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007386:	f000 f911 	bl	80075ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800738a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d112      	bne.n	80073ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d016      	beq.n	80073ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fef7 	bl	8008194 <xTaskRemoveFromEventList>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e007      	b.n	80073ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073be:	3301      	adds	r3, #1
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	b25a      	sxtb	r2, r3
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073ca:	2301      	movs	r3, #1
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073ce:	e001      	b.n	80073d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3740      	adds	r7, #64	; 0x40
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <xQueueReceive+0x30>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	623b      	str	r3, [r7, #32]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d103      	bne.n	800742a <xQueueReceive+0x3e>
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <xQueueReceive+0x42>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueReceive+0x44>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueReceive+0x5e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61fb      	str	r3, [r7, #28]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800744a:	f001 f865 	bl	8008518 <xTaskGetSchedulerState>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <xQueueReceive+0x6e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <xQueueReceive+0x72>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <xQueueReceive+0x74>
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <xQueueReceive+0x8e>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	61bb      	str	r3, [r7, #24]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800747a:	f001 fdab 	bl	8008fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01f      	beq.n	80074ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748e:	f000 f8f7 	bl	8007680 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	1e5a      	subs	r2, r3, #1
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	3310      	adds	r3, #16
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fe74 	bl	8008194 <xTaskRemoveFromEventList>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074b2:	4b3d      	ldr	r3, [pc, #244]	; (80075a8 <xQueueReceive+0x1bc>)
 80074b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074c2:	f001 fdb7 	bl	8009034 <vPortExitCritical>
				return pdPASS;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e069      	b.n	800759e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074d0:	f001 fdb0 	bl	8009034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e062      	b.n	800759e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074de:	f107 0310 	add.w	r3, r7, #16
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 feba 	bl	800825c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ec:	f001 fda2 	bl	8009034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074f0:	f000 fc26 	bl	8007d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074f4:	f001 fd6e 	bl	8008fd4 <vPortEnterCritical>
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074fe:	b25b      	sxtb	r3, r3
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d103      	bne.n	800750e <xQueueReceive+0x122>
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007514:	b25b      	sxtb	r3, r3
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d103      	bne.n	8007524 <xQueueReceive+0x138>
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007524:	f001 fd86 	bl	8009034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007528:	1d3a      	adds	r2, r7, #4
 800752a:	f107 0310 	add.w	r3, r7, #16
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f000 fea9 	bl	8008288 <xTaskCheckForTimeOut>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d123      	bne.n	8007584 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800753c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753e:	f000 f917 	bl	8007770 <prvIsQueueEmpty>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d017      	beq.n	8007578 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	3324      	adds	r3, #36	; 0x24
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fdcf 	bl	80080f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f000 f8b8 	bl	80076cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800755c:	f000 fbfe 	bl	8007d5c <xTaskResumeAll>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d189      	bne.n	800747a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <xQueueReceive+0x1bc>)
 8007568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	e780      	b.n	800747a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757a:	f000 f8a7 	bl	80076cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800757e:	f000 fbed 	bl	8007d5c <xTaskResumeAll>
 8007582:	e77a      	b.n	800747a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007586:	f000 f8a1 	bl	80076cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800758a:	f000 fbe7 	bl	8007d5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800758e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007590:	f000 f8ee 	bl	8007770 <prvIsQueueEmpty>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	f43f af6f 	beq.w	800747a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800759c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3730      	adds	r7, #48	; 0x30
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10d      	bne.n	80075e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d14d      	bne.n	800766e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 ffbc 	bl	8008554 <xTaskPriorityDisinherit>
 80075dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	609a      	str	r2, [r3, #8]
 80075e4:	e043      	b.n	800766e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d119      	bne.n	8007620 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6858      	ldr	r0, [r3, #4]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	461a      	mov	r2, r3
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	f002 f81e 	bl	8009638 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	441a      	add	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d32b      	bcc.n	800766e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	e026      	b.n	800766e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68d8      	ldr	r0, [r3, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	461a      	mov	r2, r3
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	f002 f804 	bl	8009638 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	425b      	negs	r3, r3
 800763a:	441a      	add	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d207      	bcs.n	800765c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	425b      	negs	r3, r3
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d105      	bne.n	800766e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3b01      	subs	r3, #1
 800766c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007676:	697b      	ldr	r3, [r7, #20]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d018      	beq.n	80076c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	441a      	add	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d303      	bcc.n	80076b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68d9      	ldr	r1, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	461a      	mov	r2, r3
 80076be:	6838      	ldr	r0, [r7, #0]
 80076c0:	f001 ffba 	bl	8009638 <memcpy>
	}
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076d4:	f001 fc7e 	bl	8008fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e0:	e011      	b.n	8007706 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d012      	beq.n	8007710 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3324      	adds	r3, #36	; 0x24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fd50 	bl	8008194 <xTaskRemoveFromEventList>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076fa:	f000 fe27 	bl	800834c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	3b01      	subs	r3, #1
 8007702:	b2db      	uxtb	r3, r3
 8007704:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dce9      	bgt.n	80076e2 <prvUnlockQueue+0x16>
 800770e:	e000      	b.n	8007712 <prvUnlockQueue+0x46>
					break;
 8007710:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800771a:	f001 fc8b 	bl	8009034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800771e:	f001 fc59 	bl	8008fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007728:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800772a:	e011      	b.n	8007750 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d012      	beq.n	800775a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3310      	adds	r3, #16
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fd2b 	bl	8008194 <xTaskRemoveFromEventList>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007744:	f000 fe02 	bl	800834c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	3b01      	subs	r3, #1
 800774c:	b2db      	uxtb	r3, r3
 800774e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dce9      	bgt.n	800772c <prvUnlockQueue+0x60>
 8007758:	e000      	b.n	800775c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800775a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	22ff      	movs	r2, #255	; 0xff
 8007760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007764:	f001 fc66 	bl	8009034 <vPortExitCritical>
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007778:	f001 fc2c 	bl	8008fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e001      	b.n	800778e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800778e:	f001 fc51 	bl	8009034 <vPortExitCritical>

	return xReturn;
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077a4:	f001 fc16 	bl	8008fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d102      	bne.n	80077ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e001      	b.n	80077be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077be:	f001 fc39 	bl	8009034 <vPortExitCritical>

	return xReturn;
 80077c2:	68fb      	ldr	r3, [r7, #12]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e014      	b.n	8007806 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077dc:	4a0f      	ldr	r2, [pc, #60]	; (800781c <vQueueAddToRegistry+0x50>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077e8:	490c      	ldr	r1, [pc, #48]	; (800781c <vQueueAddToRegistry+0x50>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077f2:	4a0a      	ldr	r2, [pc, #40]	; (800781c <vQueueAddToRegistry+0x50>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4413      	add	r3, r2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077fe:	e006      	b.n	800780e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b07      	cmp	r3, #7
 800780a:	d9e7      	bls.n	80077dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	24001038 	.word	0x24001038

08007820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007830:	f001 fbd0 	bl	8008fd4 <vPortEnterCritical>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800783a:	b25b      	sxtb	r3, r3
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d103      	bne.n	800784a <vQueueWaitForMessageRestricted+0x2a>
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007850:	b25b      	sxtb	r3, r3
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d103      	bne.n	8007860 <vQueueWaitForMessageRestricted+0x40>
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007860:	f001 fbe8 	bl	8009034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3324      	adds	r3, #36	; 0x24
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fc61 	bl	800813c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800787a:	6978      	ldr	r0, [r7, #20]
 800787c:	f7ff ff26 	bl	80076cc <prvUnlockQueue>
	}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08e      	sub	sp, #56	; 0x38
 800788c:	af04      	add	r7, sp, #16
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	623b      	str	r3, [r7, #32]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xTaskCreateStatic+0x46>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	61fb      	str	r3, [r7, #28]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078ce:	23bc      	movs	r3, #188	; 0xbc
 80078d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2bbc      	cmp	r3, #188	; 0xbc
 80078d6:	d00a      	beq.n	80078ee <xTaskCreateStatic+0x66>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	61bb      	str	r3, [r7, #24]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01e      	beq.n	8007934 <xTaskCreateStatic+0xac>
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01b      	beq.n	8007934 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007904:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	2202      	movs	r2, #2
 800790a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800790e:	2300      	movs	r3, #0
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	9302      	str	r3, [sp, #8]
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f850 	bl	80079cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800792c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792e:	f000 f8f3 	bl	8007b18 <prvAddNewTaskToReadyList>
 8007932:	e001      	b.n	8007938 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007938:	697b      	ldr	r3, [r7, #20]
	}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007942:	b580      	push	{r7, lr}
 8007944:	b08c      	sub	sp, #48	; 0x30
 8007946:	af04      	add	r7, sp, #16
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fc5e 	bl	8009218 <pvPortMalloc>
 800795c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00e      	beq.n	8007982 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007964:	20bc      	movs	r0, #188	; 0xbc
 8007966:	f001 fc57 	bl	8009218 <pvPortMalloc>
 800796a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
 8007978:	e005      	b.n	8007986 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f001 fd18 	bl	80093b0 <vPortFree>
 8007980:	e001      	b.n	8007986 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	2300      	movs	r3, #0
 8007998:	9303      	str	r3, [sp, #12]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	9302      	str	r3, [sp, #8]
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f80e 	bl	80079cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079b0:	69f8      	ldr	r0, [r7, #28]
 80079b2:	f000 f8b1 	bl	8007b18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079b6:	2301      	movs	r3, #1
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	e002      	b.n	80079c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295
 80079c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079c2:	69bb      	ldr	r3, [r7, #24]
	}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	461a      	mov	r2, r3
 80079e4:	21a5      	movs	r1, #165	; 0xa5
 80079e6:	f001 fe35 	bl	8009654 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80079f4:	440b      	add	r3, r1
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	617b      	str	r3, [r7, #20]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d01f      	beq.n	8007a6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	e012      	b.n	8007a56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	7819      	ldrb	r1, [r3, #0]
 8007a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3334      	adds	r3, #52	; 0x34
 8007a40:	460a      	mov	r2, r1
 8007a42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b0f      	cmp	r3, #15
 8007a5a:	d9e9      	bls.n	8007a30 <prvInitialiseNewTask+0x64>
 8007a5c:	e000      	b.n	8007a60 <prvInitialiseNewTask+0x94>
			{
				break;
 8007a5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a68:	e003      	b.n	8007a72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	2b37      	cmp	r3, #55	; 0x37
 8007a76:	d901      	bls.n	8007a7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a78:	2337      	movs	r3, #55	; 0x37
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	3304      	adds	r3, #4
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff f978 	bl	8006d88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	3318      	adds	r3, #24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff f973 	bl	8006d88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	3354      	adds	r3, #84	; 0x54
 8007acc:	2260      	movs	r2, #96	; 0x60
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 fdbf 	bl	8009654 <memset>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <prvInitialiseNewTask+0x140>)
 8007ada:	659a      	str	r2, [r3, #88]	; 0x58
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	4a0c      	ldr	r2, [pc, #48]	; (8007b10 <prvInitialiseNewTask+0x144>)
 8007ae0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	4a0b      	ldr	r2, [pc, #44]	; (8007b14 <prvInitialiseNewTask+0x148>)
 8007ae6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	69b8      	ldr	r0, [r7, #24]
 8007aee:	f001 f941 	bl	8008d74 <pxPortInitialiseStack>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b04:	bf00      	nop
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	08009970 	.word	0x08009970
 8007b10:	08009990 	.word	0x08009990
 8007b14:	08009950 	.word	0x08009950

08007b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b20:	f001 fa58 	bl	8008fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <prvAddNewTaskToReadyList+0xc4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	4a2c      	ldr	r2, [pc, #176]	; (8007bdc <prvAddNewTaskToReadyList+0xc4>)
 8007b2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b2e:	4b2c      	ldr	r3, [pc, #176]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b36:	4a2a      	ldr	r2, [pc, #168]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b3c:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <prvAddNewTaskToReadyList+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d110      	bne.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b44:	f000 fc26 	bl	8008394 <prvInitialiseTaskLists>
 8007b48:	e00d      	b.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b4a:	4b26      	ldr	r3, [pc, #152]	; (8007be4 <prvAddNewTaskToReadyList+0xcc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b52:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d802      	bhi.n	8007b66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b60:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b66:	4b20      	ldr	r3, [pc, #128]	; (8007be8 <prvAddNewTaskToReadyList+0xd0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <prvAddNewTaskToReadyList+0xd0>)
 8007b6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b70:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <prvAddNewTaskToReadyList+0xd0>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	4b1b      	ldr	r3, [pc, #108]	; (8007bec <prvAddNewTaskToReadyList+0xd4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d903      	bls.n	8007b8c <prvAddNewTaskToReadyList+0x74>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a18      	ldr	r2, [pc, #96]	; (8007bec <prvAddNewTaskToReadyList+0xd4>)
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <prvAddNewTaskToReadyList+0xd8>)
 8007b9a:	441a      	add	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f7ff f8fd 	bl	8006da2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ba8:	f001 fa44 	bl	8009034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <prvAddNewTaskToReadyList+0xcc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <prvAddNewTaskToReadyList+0xc8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d207      	bcs.n	8007bd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <prvAddNewTaskToReadyList+0xdc>)
 8007bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	2400154c 	.word	0x2400154c
 8007be0:	24001078 	.word	0x24001078
 8007be4:	24001558 	.word	0x24001558
 8007be8:	24001568 	.word	0x24001568
 8007bec:	24001554 	.word	0x24001554
 8007bf0:	2400107c 	.word	0x2400107c
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d017      	beq.n	8007c3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <vTaskDelay+0x60>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <vTaskDelay+0x30>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60bb      	str	r3, [r7, #8]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c28:	f000 f88a 	bl	8007d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fcfe 	bl	8008630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c34:	f000 f892 	bl	8007d5c <xTaskResumeAll>
 8007c38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <vTaskDelay+0x64>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	24001574 	.word	0x24001574
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c6e:	463a      	mov	r2, r7
 8007c70:	1d39      	adds	r1, r7, #4
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff f832 	bl	8006ce0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	9202      	str	r2, [sp, #8]
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	2300      	movs	r3, #0
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	4924      	ldr	r1, [pc, #144]	; (8007d20 <vTaskStartScheduler+0xc0>)
 8007c90:	4824      	ldr	r0, [pc, #144]	; (8007d24 <vTaskStartScheduler+0xc4>)
 8007c92:	f7ff fdf9 	bl	8007888 <xTaskCreateStatic>
 8007c96:	4603      	mov	r3, r0
 8007c98:	4a23      	ldr	r2, [pc, #140]	; (8007d28 <vTaskStartScheduler+0xc8>)
 8007c9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c9c:	4b22      	ldr	r3, [pc, #136]	; (8007d28 <vTaskStartScheduler+0xc8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e001      	b.n	8007cae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d102      	bne.n	8007cba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cb4:	f000 fd10 	bl	80086d8 <xTimerCreateTimerTask>
 8007cb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d11b      	bne.n	8007cf8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <vTaskStartScheduler+0xcc>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3354      	adds	r3, #84	; 0x54
 8007cda:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <vTaskStartScheduler+0xd0>)
 8007cdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cde:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <vTaskStartScheduler+0xd4>)
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ce6:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <vTaskStartScheduler+0xd8>)
 8007ce8:	2201      	movs	r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007cec:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <vTaskStartScheduler+0xdc>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cf2:	f001 f8cd 	bl	8008e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cf6:	e00e      	b.n	8007d16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d10a      	bne.n	8007d16 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <vTaskStartScheduler+0xb4>
}
 8007d16:	bf00      	nop
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	080098dc 	.word	0x080098dc
 8007d24:	08008365 	.word	0x08008365
 8007d28:	24001570 	.word	0x24001570
 8007d2c:	24001078 	.word	0x24001078
 8007d30:	24000014 	.word	0x24000014
 8007d34:	2400156c 	.word	0x2400156c
 8007d38:	24001558 	.word	0x24001558
 8007d3c:	24001550 	.word	0x24001550

08007d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d44:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <vTaskSuspendAll+0x18>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	4a03      	ldr	r2, [pc, #12]	; (8007d58 <vTaskSuspendAll+0x18>)
 8007d4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d4e:	bf00      	nop
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	24001574 	.word	0x24001574

08007d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d6a:	4b42      	ldr	r3, [pc, #264]	; (8007e74 <xTaskResumeAll+0x118>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	603b      	str	r3, [r7, #0]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d88:	f001 f924 	bl	8008fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d8c:	4b39      	ldr	r3, [pc, #228]	; (8007e74 <xTaskResumeAll+0x118>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	4a38      	ldr	r2, [pc, #224]	; (8007e74 <xTaskResumeAll+0x118>)
 8007d94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d96:	4b37      	ldr	r3, [pc, #220]	; (8007e74 <xTaskResumeAll+0x118>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d162      	bne.n	8007e64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d9e:	4b36      	ldr	r3, [pc, #216]	; (8007e78 <xTaskResumeAll+0x11c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d05e      	beq.n	8007e64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da6:	e02f      	b.n	8007e08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da8:	4b34      	ldr	r3, [pc, #208]	; (8007e7c <xTaskResumeAll+0x120>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3318      	adds	r3, #24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff f851 	bl	8006e5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff f84c 	bl	8006e5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4b2d      	ldr	r3, [pc, #180]	; (8007e80 <xTaskResumeAll+0x124>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d903      	bls.n	8007dd8 <xTaskResumeAll+0x7c>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	4a2a      	ldr	r2, [pc, #168]	; (8007e80 <xTaskResumeAll+0x124>)
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	4613      	mov	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4a27      	ldr	r2, [pc, #156]	; (8007e84 <xTaskResumeAll+0x128>)
 8007de6:	441a      	add	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3304      	adds	r3, #4
 8007dec:	4619      	mov	r1, r3
 8007dee:	4610      	mov	r0, r2
 8007df0:	f7fe ffd7 	bl	8006da2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4b23      	ldr	r3, [pc, #140]	; (8007e88 <xTaskResumeAll+0x12c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e02:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <xTaskResumeAll+0x130>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <xTaskResumeAll+0x120>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1cb      	bne.n	8007da8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e16:	f000 fb5f 	bl	80084d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e1a:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <xTaskResumeAll+0x134>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e26:	f000 f847 	bl	8007eb8 <xTaskIncrementTick>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e30:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <xTaskResumeAll+0x130>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f1      	bne.n	8007e26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <xTaskResumeAll+0x134>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e48:	4b10      	ldr	r3, [pc, #64]	; (8007e8c <xTaskResumeAll+0x130>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e50:	2301      	movs	r3, #1
 8007e52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <xTaskResumeAll+0x138>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e64:	f001 f8e6 	bl	8009034 <vPortExitCritical>

	return xAlreadyYielded;
 8007e68:	68bb      	ldr	r3, [r7, #8]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	24001574 	.word	0x24001574
 8007e78:	2400154c 	.word	0x2400154c
 8007e7c:	2400150c 	.word	0x2400150c
 8007e80:	24001554 	.word	0x24001554
 8007e84:	2400107c 	.word	0x2400107c
 8007e88:	24001078 	.word	0x24001078
 8007e8c:	24001560 	.word	0x24001560
 8007e90:	2400155c 	.word	0x2400155c
 8007e94:	e000ed04 	.word	0xe000ed04

08007e98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <xTaskGetTickCount+0x1c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ea4:	687b      	ldr	r3, [r7, #4]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	24001550 	.word	0x24001550

08007eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ec2:	4b4f      	ldr	r3, [pc, #316]	; (8008000 <xTaskIncrementTick+0x148>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 808f 	bne.w	8007fea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ecc:	4b4d      	ldr	r3, [pc, #308]	; (8008004 <xTaskIncrementTick+0x14c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ed4:	4a4b      	ldr	r2, [pc, #300]	; (8008004 <xTaskIncrementTick+0x14c>)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d120      	bne.n	8007f22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ee0:	4b49      	ldr	r3, [pc, #292]	; (8008008 <xTaskIncrementTick+0x150>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <xTaskIncrementTick+0x48>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	603b      	str	r3, [r7, #0]
}
 8007efc:	bf00      	nop
 8007efe:	e7fe      	b.n	8007efe <xTaskIncrementTick+0x46>
 8007f00:	4b41      	ldr	r3, [pc, #260]	; (8008008 <xTaskIncrementTick+0x150>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	4b41      	ldr	r3, [pc, #260]	; (800800c <xTaskIncrementTick+0x154>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a3f      	ldr	r2, [pc, #252]	; (8008008 <xTaskIncrementTick+0x150>)
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	4a3f      	ldr	r2, [pc, #252]	; (800800c <xTaskIncrementTick+0x154>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <xTaskIncrementTick+0x158>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	4a3d      	ldr	r2, [pc, #244]	; (8008010 <xTaskIncrementTick+0x158>)
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	f000 fadb 	bl	80084d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f22:	4b3c      	ldr	r3, [pc, #240]	; (8008014 <xTaskIncrementTick+0x15c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d349      	bcc.n	8007fc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f2c:	4b36      	ldr	r3, [pc, #216]	; (8008008 <xTaskIncrementTick+0x150>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f36:	4b37      	ldr	r3, [pc, #220]	; (8008014 <xTaskIncrementTick+0x15c>)
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	601a      	str	r2, [r3, #0]
					break;
 8007f3e:	e03f      	b.n	8007fc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f40:	4b31      	ldr	r3, [pc, #196]	; (8008008 <xTaskIncrementTick+0x150>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d203      	bcs.n	8007f60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f58:	4a2e      	ldr	r2, [pc, #184]	; (8008014 <xTaskIncrementTick+0x15c>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f5e:	e02f      	b.n	8007fc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe ff79 	bl	8006e5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	3318      	adds	r3, #24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe ff70 	bl	8006e5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <xTaskIncrementTick+0x160>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <xTaskIncrementTick+0xd8>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a22      	ldr	r2, [pc, #136]	; (8008018 <xTaskIncrementTick+0x160>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	; (800801c <xTaskIncrementTick+0x164>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe fefb 	bl	8006da2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <xTaskIncrementTick+0x168>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3b8      	bcc.n	8007f2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fbe:	e7b5      	b.n	8007f2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fc0:	4b17      	ldr	r3, [pc, #92]	; (8008020 <xTaskIncrementTick+0x168>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	4915      	ldr	r1, [pc, #84]	; (800801c <xTaskIncrementTick+0x164>)
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d901      	bls.n	8007fdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007fdc:	4b11      	ldr	r3, [pc, #68]	; (8008024 <xTaskIncrementTick+0x16c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e004      	b.n	8007ff4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <xTaskIncrementTick+0x170>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <xTaskIncrementTick+0x170>)
 8007ff2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	24001574 	.word	0x24001574
 8008004:	24001550 	.word	0x24001550
 8008008:	24001504 	.word	0x24001504
 800800c:	24001508 	.word	0x24001508
 8008010:	24001564 	.word	0x24001564
 8008014:	2400156c 	.word	0x2400156c
 8008018:	24001554 	.word	0x24001554
 800801c:	2400107c 	.word	0x2400107c
 8008020:	24001078 	.word	0x24001078
 8008024:	24001560 	.word	0x24001560
 8008028:	2400155c 	.word	0x2400155c

0800802c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008032:	4b2a      	ldr	r3, [pc, #168]	; (80080dc <vTaskSwitchContext+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800803a:	4b29      	ldr	r3, [pc, #164]	; (80080e0 <vTaskSwitchContext+0xb4>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008040:	e046      	b.n	80080d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008042:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <vTaskSwitchContext+0xb4>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008048:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <vTaskSwitchContext+0xb8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e010      	b.n	8008072 <vTaskSwitchContext+0x46>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <vTaskSwitchContext+0x40>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	607b      	str	r3, [r7, #4]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <vTaskSwitchContext+0x3e>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3b01      	subs	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	491d      	ldr	r1, [pc, #116]	; (80080e8 <vTaskSwitchContext+0xbc>)
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0e4      	beq.n	8008050 <vTaskSwitchContext+0x24>
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <vTaskSwitchContext+0xbc>)
 8008092:	4413      	add	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3308      	adds	r3, #8
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d104      	bne.n	80080b6 <vTaskSwitchContext+0x8a>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	4a0b      	ldr	r2, [pc, #44]	; (80080ec <vTaskSwitchContext+0xc0>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	4a08      	ldr	r2, [pc, #32]	; (80080e4 <vTaskSwitchContext+0xb8>)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <vTaskSwitchContext+0xc0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3354      	adds	r3, #84	; 0x54
 80080cc:	4a08      	ldr	r2, [pc, #32]	; (80080f0 <vTaskSwitchContext+0xc4>)
 80080ce:	6013      	str	r3, [r2, #0]
}
 80080d0:	bf00      	nop
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	24001574 	.word	0x24001574
 80080e0:	24001560 	.word	0x24001560
 80080e4:	24001554 	.word	0x24001554
 80080e8:	2400107c 	.word	0x2400107c
 80080ec:	24001078 	.word	0x24001078
 80080f0:	24000014 	.word	0x24000014

080080f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	60fb      	str	r3, [r7, #12]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <vTaskPlaceOnEventList+0x44>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3318      	adds	r3, #24
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fe fe61 	bl	8006dea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008128:	2101      	movs	r1, #1
 800812a:	6838      	ldr	r0, [r7, #0]
 800812c:	f000 fa80 	bl	8008630 <prvAddCurrentTaskToDelayedList>
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	24001078 	.word	0x24001078

0800813c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	617b      	str	r3, [r7, #20]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <vTaskPlaceOnEventListRestricted+0x54>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3318      	adds	r3, #24
 800816a:	4619      	mov	r1, r3
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7fe fe18 	bl	8006da2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008178:	f04f 33ff 	mov.w	r3, #4294967295
 800817c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	68b8      	ldr	r0, [r7, #8]
 8008182:	f000 fa55 	bl	8008630 <prvAddCurrentTaskToDelayedList>
	}
 8008186:	bf00      	nop
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	24001078 	.word	0x24001078

08008194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	60fb      	str	r3, [r7, #12]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	3318      	adds	r3, #24
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fe49 	bl	8006e5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ca:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <xTaskRemoveFromEventList+0xb0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d11d      	bne.n	800820e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fe40 	bl	8006e5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <xTaskRemoveFromEventList+0xb4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d903      	bls.n	80081f0 <xTaskRemoveFromEventList+0x5c>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a16      	ldr	r2, [pc, #88]	; (8008248 <xTaskRemoveFromEventList+0xb4>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a13      	ldr	r2, [pc, #76]	; (800824c <xTaskRemoveFromEventList+0xb8>)
 80081fe:	441a      	add	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fdcb 	bl	8006da2 <vListInsertEnd>
 800820c:	e005      	b.n	800821a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3318      	adds	r3, #24
 8008212:	4619      	mov	r1, r3
 8008214:	480e      	ldr	r0, [pc, #56]	; (8008250 <xTaskRemoveFromEventList+0xbc>)
 8008216:	f7fe fdc4 	bl	8006da2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <xTaskRemoveFromEventList+0xc0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	429a      	cmp	r2, r3
 8008226:	d905      	bls.n	8008234 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800822c:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <xTaskRemoveFromEventList+0xc4>)
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e001      	b.n	8008238 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	24001574 	.word	0x24001574
 8008248:	24001554 	.word	0x24001554
 800824c:	2400107c 	.word	0x2400107c
 8008250:	2400150c 	.word	0x2400150c
 8008254:	24001078 	.word	0x24001078
 8008258:	24001560 	.word	0x24001560

0800825c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008264:	4b06      	ldr	r3, [pc, #24]	; (8008280 <vTaskInternalSetTimeOutState+0x24>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <vTaskInternalSetTimeOutState+0x28>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	605a      	str	r2, [r3, #4]
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	24001564 	.word	0x24001564
 8008284:	24001550 	.word	0x24001550

08008288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	613b      	str	r3, [r7, #16]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60fb      	str	r3, [r7, #12]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082ca:	f000 fe83 	bl	8008fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082ce:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <xTaskCheckForTimeOut+0xbc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d102      	bne.n	80082ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	e023      	b.n	8008336 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <xTaskCheckForTimeOut+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d007      	beq.n	800830a <xTaskCheckForTimeOut+0x82>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
 8008308:	e015      	b.n	8008336 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	429a      	cmp	r2, r3
 8008312:	d20b      	bcs.n	800832c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ff9b 	bl	800825c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	e004      	b.n	8008336 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008332:	2301      	movs	r3, #1
 8008334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008336:	f000 fe7d 	bl	8009034 <vPortExitCritical>

	return xReturn;
 800833a:	69fb      	ldr	r3, [r7, #28]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	24001550 	.word	0x24001550
 8008348:	24001564 	.word	0x24001564

0800834c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <vTaskMissedYield+0x14>)
 8008352:	2201      	movs	r2, #1
 8008354:	601a      	str	r2, [r3, #0]
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	24001560 	.word	0x24001560

08008364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800836c:	f000 f852 	bl	8008414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <prvIdleTask+0x28>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d9f9      	bls.n	800836c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <prvIdleTask+0x2c>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008388:	e7f0      	b.n	800836c <prvIdleTask+0x8>
 800838a:	bf00      	nop
 800838c:	2400107c 	.word	0x2400107c
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800839a:	2300      	movs	r3, #0
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	e00c      	b.n	80083ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4a12      	ldr	r2, [pc, #72]	; (80083f4 <prvInitialiseTaskLists+0x60>)
 80083ac:	4413      	add	r3, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fcca 	bl	8006d48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3301      	adds	r3, #1
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b37      	cmp	r3, #55	; 0x37
 80083be:	d9ef      	bls.n	80083a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083c0:	480d      	ldr	r0, [pc, #52]	; (80083f8 <prvInitialiseTaskLists+0x64>)
 80083c2:	f7fe fcc1 	bl	8006d48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083c6:	480d      	ldr	r0, [pc, #52]	; (80083fc <prvInitialiseTaskLists+0x68>)
 80083c8:	f7fe fcbe 	bl	8006d48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083cc:	480c      	ldr	r0, [pc, #48]	; (8008400 <prvInitialiseTaskLists+0x6c>)
 80083ce:	f7fe fcbb 	bl	8006d48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083d2:	480c      	ldr	r0, [pc, #48]	; (8008404 <prvInitialiseTaskLists+0x70>)
 80083d4:	f7fe fcb8 	bl	8006d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083d8:	480b      	ldr	r0, [pc, #44]	; (8008408 <prvInitialiseTaskLists+0x74>)
 80083da:	f7fe fcb5 	bl	8006d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <prvInitialiseTaskLists+0x78>)
 80083e0:	4a05      	ldr	r2, [pc, #20]	; (80083f8 <prvInitialiseTaskLists+0x64>)
 80083e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <prvInitialiseTaskLists+0x7c>)
 80083e6:	4a05      	ldr	r2, [pc, #20]	; (80083fc <prvInitialiseTaskLists+0x68>)
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	2400107c 	.word	0x2400107c
 80083f8:	240014dc 	.word	0x240014dc
 80083fc:	240014f0 	.word	0x240014f0
 8008400:	2400150c 	.word	0x2400150c
 8008404:	24001520 	.word	0x24001520
 8008408:	24001538 	.word	0x24001538
 800840c:	24001504 	.word	0x24001504
 8008410:	24001508 	.word	0x24001508

08008414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800841a:	e019      	b.n	8008450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800841c:	f000 fdda 	bl	8008fd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008420:	4b10      	ldr	r3, [pc, #64]	; (8008464 <prvCheckTasksWaitingTermination+0x50>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fd15 	bl	8006e5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008432:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <prvCheckTasksWaitingTermination+0x54>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3b01      	subs	r3, #1
 8008438:	4a0b      	ldr	r2, [pc, #44]	; (8008468 <prvCheckTasksWaitingTermination+0x54>)
 800843a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <prvCheckTasksWaitingTermination+0x58>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3b01      	subs	r3, #1
 8008442:	4a0a      	ldr	r2, [pc, #40]	; (800846c <prvCheckTasksWaitingTermination+0x58>)
 8008444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008446:	f000 fdf5 	bl	8009034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f810 	bl	8008470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <prvCheckTasksWaitingTermination+0x58>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e1      	bne.n	800841c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	24001520 	.word	0x24001520
 8008468:	2400154c 	.word	0x2400154c
 800846c:	24001534 	.word	0x24001534

08008470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3354      	adds	r3, #84	; 0x54
 800847c:	4618      	mov	r0, r3
 800847e:	f001 f8ff 	bl	8009680 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	4618      	mov	r0, r3
 8008492:	f000 ff8d 	bl	80093b0 <vPortFree>
				vPortFree( pxTCB );
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 ff8a 	bl	80093b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800849c:	e018      	b.n	80084d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d103      	bne.n	80084b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 ff81 	bl	80093b0 <vPortFree>
	}
 80084ae:	e00f      	b.n	80084d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d00a      	beq.n	80084d0 <prvDeleteTCB+0x60>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60fb      	str	r3, [r7, #12]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <prvDeleteTCB+0x5e>
	}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <prvResetNextTaskUnblockTime+0x38>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <prvResetNextTaskUnblockTime+0x3c>)
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f0:	e008      	b.n	8008504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <prvResetNextTaskUnblockTime+0x38>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4a04      	ldr	r2, [pc, #16]	; (8008514 <prvResetNextTaskUnblockTime+0x3c>)
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	24001504 	.word	0x24001504
 8008514:	2400156c 	.word	0x2400156c

08008518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <xTaskGetSchedulerState+0x34>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008526:	2301      	movs	r3, #1
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	e008      	b.n	800853e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <xTaskGetSchedulerState+0x38>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008534:	2302      	movs	r3, #2
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	e001      	b.n	800853e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800853a:	2300      	movs	r3, #0
 800853c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800853e:	687b      	ldr	r3, [r7, #4]
	}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	24001558 	.word	0x24001558
 8008550:	24001574 	.word	0x24001574

08008554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d056      	beq.n	8008618 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800856a:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <xTaskPriorityDisinherit+0xd0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	d00a      	beq.n	800858a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	60fb      	str	r3, [r7, #12]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	60bb      	str	r3, [r7, #8]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ac:	1e5a      	subs	r2, r3, #1
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d02c      	beq.n	8008618 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d128      	bne.n	8008618 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fc46 	bl	8006e5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <xTaskPriorityDisinherit+0xd4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d903      	bls.n	80085f8 <xTaskPriorityDisinherit+0xa4>
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <xTaskPriorityDisinherit+0xd4>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4a09      	ldr	r2, [pc, #36]	; (800862c <xTaskPriorityDisinherit+0xd8>)
 8008606:	441a      	add	r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fe fbc7 	bl	8006da2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008614:	2301      	movs	r3, #1
 8008616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008618:	697b      	ldr	r3, [r7, #20]
	}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	24001078 	.word	0x24001078
 8008628:	24001554 	.word	0x24001554
 800862c:	2400107c 	.word	0x2400107c

08008630 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008640:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3304      	adds	r3, #4
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fc08 	bl	8006e5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008652:	d10a      	bne.n	800866a <prvAddCurrentTaskToDelayedList+0x3a>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800865a:	4b1a      	ldr	r3, [pc, #104]	; (80086c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3304      	adds	r3, #4
 8008660:	4619      	mov	r1, r3
 8008662:	4819      	ldr	r0, [pc, #100]	; (80086c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008664:	f7fe fb9d 	bl	8006da2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008668:	e026      	b.n	80086b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4413      	add	r3, r2
 8008670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008672:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	429a      	cmp	r2, r3
 8008680:	d209      	bcs.n	8008696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3304      	adds	r3, #4
 800868c:	4619      	mov	r1, r3
 800868e:	4610      	mov	r0, r2
 8008690:	f7fe fbab 	bl	8006dea <vListInsert>
}
 8008694:	e010      	b.n	80086b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3304      	adds	r3, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f7fe fba1 	bl	8006dea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d202      	bcs.n	80086b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086b2:	4a08      	ldr	r2, [pc, #32]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	6013      	str	r3, [r2, #0]
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	24001550 	.word	0x24001550
 80086c4:	24001078 	.word	0x24001078
 80086c8:	24001538 	.word	0x24001538
 80086cc:	24001508 	.word	0x24001508
 80086d0:	24001504 	.word	0x24001504
 80086d4:	2400156c 	.word	0x2400156c

080086d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086e2:	f000 fb07 	bl	8008cf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086e6:	4b1c      	ldr	r3, [pc, #112]	; (8008758 <xTimerCreateTimerTask+0x80>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d021      	beq.n	8008732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086f6:	1d3a      	adds	r2, r7, #4
 80086f8:	f107 0108 	add.w	r1, r7, #8
 80086fc:	f107 030c 	add.w	r3, r7, #12
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fb07 	bl	8006d14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	9202      	str	r2, [sp, #8]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	2302      	movs	r3, #2
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	2300      	movs	r3, #0
 8008716:	460a      	mov	r2, r1
 8008718:	4910      	ldr	r1, [pc, #64]	; (800875c <xTimerCreateTimerTask+0x84>)
 800871a:	4811      	ldr	r0, [pc, #68]	; (8008760 <xTimerCreateTimerTask+0x88>)
 800871c:	f7ff f8b4 	bl	8007888 <xTaskCreateStatic>
 8008720:	4603      	mov	r3, r0
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <xTimerCreateTimerTask+0x8c>)
 8008724:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <xTimerCreateTimerTask+0x8c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800872e:	2301      	movs	r3, #1
 8008730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	613b      	str	r3, [r7, #16]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800874e:	697b      	ldr	r3, [r7, #20]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	240015a8 	.word	0x240015a8
 800875c:	080098e4 	.word	0x080098e4
 8008760:	0800889d 	.word	0x0800889d
 8008764:	240015ac 	.word	0x240015ac

08008768 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008796:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <xTimerGenericCommand+0x98>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d02a      	beq.n	80087f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	dc18      	bgt.n	80087e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087b0:	f7ff feb2 	bl	8008518 <xTaskGetSchedulerState>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d109      	bne.n	80087ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087ba:	4b11      	ldr	r3, [pc, #68]	; (8008800 <xTimerGenericCommand+0x98>)
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	f107 0110 	add.w	r1, r7, #16
 80087c2:	2300      	movs	r3, #0
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	f7fe fc77 	bl	80070b8 <xQueueGenericSend>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24
 80087cc:	e012      	b.n	80087f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <xTimerGenericCommand+0x98>)
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f107 0110 	add.w	r1, r7, #16
 80087d6:	2300      	movs	r3, #0
 80087d8:	2200      	movs	r2, #0
 80087da:	f7fe fc6d 	bl	80070b8 <xQueueGenericSend>
 80087de:	6278      	str	r0, [r7, #36]	; 0x24
 80087e0:	e008      	b.n	80087f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <xTimerGenericCommand+0x98>)
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f107 0110 	add.w	r1, r7, #16
 80087ea:	2300      	movs	r3, #0
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	f7fe fd61 	bl	80072b4 <xQueueGenericSendFromISR>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3728      	adds	r7, #40	; 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	240015a8 	.word	0x240015a8

08008804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af02      	add	r7, sp, #8
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880e:	4b22      	ldr	r3, [pc, #136]	; (8008898 <prvProcessExpiredTimer+0x94>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	3304      	adds	r3, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fb1d 	bl	8006e5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d022      	beq.n	8008876 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	699a      	ldr	r2, [r3, #24]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	18d1      	adds	r1, r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	6978      	ldr	r0, [r7, #20]
 800883e:	f000 f8d1 	bl	80089e4 <prvInsertTimerInActiveList>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01f      	beq.n	8008888 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	2300      	movs	r3, #0
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	2100      	movs	r1, #0
 8008852:	6978      	ldr	r0, [r7, #20]
 8008854:	f7ff ff88 	bl	8008768 <xTimerGenericCommand>
 8008858:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d113      	bne.n	8008888 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60fb      	str	r3, [r7, #12]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800887c:	f023 0301 	bic.w	r3, r3, #1
 8008880:	b2da      	uxtb	r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	6978      	ldr	r0, [r7, #20]
 800888e:	4798      	blx	r3
}
 8008890:	bf00      	nop
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	240015a0 	.word	0x240015a0

0800889c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088a4:	f107 0308 	add.w	r3, r7, #8
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f857 	bl	800895c <prvGetNextExpireTime>
 80088ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4619      	mov	r1, r3
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f803 	bl	80088c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088ba:	f000 f8d5 	bl	8008a68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088be:	e7f1      	b.n	80088a4 <prvTimerTask+0x8>

080088c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088ca:	f7ff fa39 	bl	8007d40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088ce:	f107 0308 	add.w	r3, r7, #8
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 f866 	bl	80089a4 <prvSampleTimeNow>
 80088d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d130      	bne.n	8008942 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <prvProcessTimerOrBlockTask+0x3c>
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d806      	bhi.n	80088fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088ee:	f7ff fa35 	bl	8007d5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ff85 	bl	8008804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088fa:	e024      	b.n	8008946 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d008      	beq.n	8008914 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <prvProcessTimerOrBlockTask+0x90>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <prvProcessTimerOrBlockTask+0x50>
 800890c:	2301      	movs	r3, #1
 800890e:	e000      	b.n	8008912 <prvProcessTimerOrBlockTask+0x52>
 8008910:	2300      	movs	r3, #0
 8008912:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <prvProcessTimerOrBlockTask+0x94>)
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	4619      	mov	r1, r3
 8008922:	f7fe ff7d 	bl	8007820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008926:	f7ff fa19 	bl	8007d5c <xTaskResumeAll>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008930:	4b09      	ldr	r3, [pc, #36]	; (8008958 <prvProcessTimerOrBlockTask+0x98>)
 8008932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	f3bf 8f6f 	isb	sy
}
 8008940:	e001      	b.n	8008946 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008942:	f7ff fa0b 	bl	8007d5c <xTaskResumeAll>
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	240015a4 	.word	0x240015a4
 8008954:	240015a8 	.word	0x240015a8
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008964:	4b0e      	ldr	r3, [pc, #56]	; (80089a0 <prvGetNextExpireTime+0x44>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <prvGetNextExpireTime+0x16>
 800896e:	2201      	movs	r2, #1
 8008970:	e000      	b.n	8008974 <prvGetNextExpireTime+0x18>
 8008972:	2200      	movs	r2, #0
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d105      	bne.n	800898c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <prvGetNextExpireTime+0x44>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	e001      	b.n	8008990 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008990:	68fb      	ldr	r3, [r7, #12]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	240015a0 	.word	0x240015a0

080089a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089ac:	f7ff fa74 	bl	8007e98 <xTaskGetTickCount>
 80089b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <prvSampleTimeNow+0x3c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d205      	bcs.n	80089c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089bc:	f000 f936 	bl	8008c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	e002      	b.n	80089ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089ce:	4a04      	ldr	r2, [pc, #16]	; (80089e0 <prvSampleTimeNow+0x3c>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089d4:	68fb      	ldr	r3, [r7, #12]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	240015b0 	.word	0x240015b0

080089e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d812      	bhi.n	8008a30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d302      	bcc.n	8008a1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	e01b      	b.n	8008a56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a1e:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <prvInsertTimerInActiveList+0x7c>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4619      	mov	r1, r3
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f7fe f9de 	bl	8006dea <vListInsert>
 8008a2e:	e012      	b.n	8008a56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d206      	bcs.n	8008a46 <prvInsertTimerInActiveList+0x62>
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e007      	b.n	8008a56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a46:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <prvInsertTimerInActiveList+0x80>)
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f7fe f9ca 	bl	8006dea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a56:	697b      	ldr	r3, [r7, #20]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	240015a4 	.word	0x240015a4
 8008a64:	240015a0 	.word	0x240015a0

08008a68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08e      	sub	sp, #56	; 0x38
 8008a6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a6e:	e0ca      	b.n	8008c06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	da18      	bge.n	8008aa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a76:	1d3b      	adds	r3, r7, #4
 8008a78:	3304      	adds	r3, #4
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10a      	bne.n	8008a98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61fb      	str	r3, [r7, #28]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a9e:	6850      	ldr	r0, [r2, #4]
 8008aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa2:	6892      	ldr	r2, [r2, #8]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f2c0 80aa 	blt.w	8008c04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe f9cb 	bl	8006e5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff ff6b 	bl	80089a4 <prvSampleTimeNow>
 8008ace:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b09      	cmp	r3, #9
 8008ad4:	f200 8097 	bhi.w	8008c06 <prvProcessReceivedCommands+0x19e>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <prvProcessReceivedCommands+0x78>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b09 	.word	0x08008b09
 8008ae4:	08008b09 	.word	0x08008b09
 8008ae8:	08008b09 	.word	0x08008b09
 8008aec:	08008b7d 	.word	0x08008b7d
 8008af0:	08008b91 	.word	0x08008b91
 8008af4:	08008bdb 	.word	0x08008bdb
 8008af8:	08008b09 	.word	0x08008b09
 8008afc:	08008b09 	.word	0x08008b09
 8008b00:	08008b7d 	.word	0x08008b7d
 8008b04:	08008b91 	.word	0x08008b91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	18d1      	adds	r1, r2, r3
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b28:	f7ff ff5c 	bl	80089e4 <prvInsertTimerInActiveList>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d069      	beq.n	8008c06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d05e      	beq.n	8008c06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	441a      	add	r2, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5a:	f7ff fe05 	bl	8008768 <xTimerGenericCommand>
 8008b5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d14f      	bne.n	8008c06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	61bb      	str	r3, [r7, #24]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b82:	f023 0301 	bic.w	r3, r3, #1
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008b8e:	e03a      	b.n	8008c06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	617b      	str	r3, [r7, #20]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	18d1      	adds	r1, r2, r3
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd4:	f7ff ff06 	bl	80089e4 <prvInsertTimerInActiveList>
					break;
 8008bd8:	e015      	b.n	8008c06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d103      	bne.n	8008bf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bea:	f000 fbe1 	bl	80093b0 <vPortFree>
 8008bee:	e00a      	b.n	8008c06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c02:	e000      	b.n	8008c06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c06:	4b08      	ldr	r3, [pc, #32]	; (8008c28 <prvProcessReceivedCommands+0x1c0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	1d39      	adds	r1, r7, #4
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fbec 	bl	80073ec <xQueueReceive>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f47f af2a 	bne.w	8008a70 <prvProcessReceivedCommands+0x8>
	}
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	3730      	adds	r7, #48	; 0x30
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	240015a8 	.word	0x240015a8

08008c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c32:	e048      	b.n	8008cc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c34:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <prvSwitchTimerLists+0xc0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c3e:	4b2b      	ldr	r3, [pc, #172]	; (8008cec <prvSwitchTimerLists+0xc0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe f905 	bl	8006e5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d02e      	beq.n	8008cc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4413      	add	r3, r2
 8008c70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d90e      	bls.n	8008c98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c86:	4b19      	ldr	r3, [pc, #100]	; (8008cec <prvSwitchTimerLists+0xc0>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f7fe f8aa 	bl	8006dea <vListInsert>
 8008c96:	e016      	b.n	8008cc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c98:	2300      	movs	r3, #0
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7ff fd60 	bl	8008768 <xTimerGenericCommand>
 8008ca8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	603b      	str	r3, [r7, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <prvSwitchTimerLists+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1b1      	bne.n	8008c34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <prvSwitchTimerLists+0xc0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cd6:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <prvSwitchTimerLists+0xc4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a04      	ldr	r2, [pc, #16]	; (8008cec <prvSwitchTimerLists+0xc0>)
 8008cdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cde:	4a04      	ldr	r2, [pc, #16]	; (8008cf0 <prvSwitchTimerLists+0xc4>)
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	6013      	str	r3, [r2, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	240015a0 	.word	0x240015a0
 8008cf0:	240015a4 	.word	0x240015a4

08008cf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cfa:	f000 f96b 	bl	8008fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cfe:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d120      	bne.n	8008d48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d06:	4814      	ldr	r0, [pc, #80]	; (8008d58 <prvCheckForValidListAndQueue+0x64>)
 8008d08:	f7fe f81e 	bl	8006d48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d0c:	4813      	ldr	r0, [pc, #76]	; (8008d5c <prvCheckForValidListAndQueue+0x68>)
 8008d0e:	f7fe f81b 	bl	8006d48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <prvCheckForValidListAndQueue+0x6c>)
 8008d14:	4a10      	ldr	r2, [pc, #64]	; (8008d58 <prvCheckForValidListAndQueue+0x64>)
 8008d16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d18:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <prvCheckForValidListAndQueue+0x70>)
 8008d1a:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <prvCheckForValidListAndQueue+0x68>)
 8008d1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <prvCheckForValidListAndQueue+0x74>)
 8008d24:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <prvCheckForValidListAndQueue+0x78>)
 8008d26:	2110      	movs	r1, #16
 8008d28:	200a      	movs	r0, #10
 8008d2a:	f7fe f929 	bl	8006f80 <xQueueGenericCreateStatic>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	490b      	ldr	r1, [pc, #44]	; (8008d70 <prvCheckForValidListAndQueue+0x7c>)
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fd42 	bl	80077cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d48:	f000 f974 	bl	8009034 <vPortExitCritical>
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	240015a8 	.word	0x240015a8
 8008d58:	24001578 	.word	0x24001578
 8008d5c:	2400158c 	.word	0x2400158c
 8008d60:	240015a0 	.word	0x240015a0
 8008d64:	240015a4 	.word	0x240015a4
 8008d68:	24001654 	.word	0x24001654
 8008d6c:	240015b4 	.word	0x240015b4
 8008d70:	080098ec 	.word	0x080098ec

08008d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3b04      	subs	r3, #4
 8008d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3b04      	subs	r3, #4
 8008d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f023 0201 	bic.w	r2, r3, #1
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3b04      	subs	r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008da4:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <pxPortInitialiseStack+0x64>)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3b14      	subs	r3, #20
 8008dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3b04      	subs	r3, #4
 8008dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f06f 0202 	mvn.w	r2, #2
 8008dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3b20      	subs	r3, #32
 8008dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	08008ddd 	.word	0x08008ddd

08008ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008de6:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <prvTaskExitError+0x54>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d00a      	beq.n	8008e06 <prvTaskExitError+0x2a>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <prvTaskExitError+0x28>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60bb      	str	r3, [r7, #8]
}
 8008e18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e1a:	bf00      	nop
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0fc      	beq.n	8008e1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	24000010 	.word	0x24000010
	...

08008e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <pxCurrentTCBConst2>)
 8008e42:	6819      	ldr	r1, [r3, #0]
 8008e44:	6808      	ldr	r0, [r1, #0]
 8008e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4a:	f380 8809 	msr	PSP, r0
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f04f 0000 	mov.w	r0, #0
 8008e56:	f380 8811 	msr	BASEPRI, r0
 8008e5a:	4770      	bx	lr
 8008e5c:	f3af 8000 	nop.w

08008e60 <pxCurrentTCBConst2>:
 8008e60:	24001078 	.word	0x24001078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop

08008e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e68:	4808      	ldr	r0, [pc, #32]	; (8008e8c <prvPortStartFirstTask+0x24>)
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	f380 8808 	msr	MSP, r0
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8814 	msr	CONTROL, r0
 8008e7a:	b662      	cpsie	i
 8008e7c:	b661      	cpsie	f
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	df00      	svc	0
 8008e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e8a:	bf00      	nop
 8008e8c:	e000ed08 	.word	0xe000ed08

08008e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e96:	4b46      	ldr	r3, [pc, #280]	; (8008fb0 <xPortStartScheduler+0x120>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a46      	ldr	r2, [pc, #280]	; (8008fb4 <xPortStartScheduler+0x124>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d10a      	bne.n	8008eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	613b      	str	r3, [r7, #16]
}
 8008eb2:	bf00      	nop
 8008eb4:	e7fe      	b.n	8008eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008eb6:	4b3e      	ldr	r3, [pc, #248]	; (8008fb0 <xPortStartScheduler+0x120>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a3f      	ldr	r2, [pc, #252]	; (8008fb8 <xPortStartScheduler+0x128>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10a      	bne.n	8008ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ed6:	4b39      	ldr	r3, [pc, #228]	; (8008fbc <xPortStartScheduler+0x12c>)
 8008ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	22ff      	movs	r2, #255	; 0xff
 8008ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4b31      	ldr	r3, [pc, #196]	; (8008fc0 <xPortStartScheduler+0x130>)
 8008efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008efe:	4b31      	ldr	r3, [pc, #196]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f00:	2207      	movs	r2, #7
 8008f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f04:	e009      	b.n	8008f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f06:	4b2f      	ldr	r3, [pc, #188]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	4a2d      	ldr	r2, [pc, #180]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f22:	2b80      	cmp	r3, #128	; 0x80
 8008f24:	d0ef      	beq.n	8008f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f26:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f1c3 0307 	rsb	r3, r3, #7
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d00a      	beq.n	8008f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	60bb      	str	r3, [r7, #8]
}
 8008f44:	bf00      	nop
 8008f46:	e7fe      	b.n	8008f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f48:	4b1e      	ldr	r3, [pc, #120]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	4a1d      	ldr	r2, [pc, #116]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f52:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f5a:	4a1a      	ldr	r2, [pc, #104]	; (8008fc4 <xPortStartScheduler+0x134>)
 8008f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f66:	4b18      	ldr	r3, [pc, #96]	; (8008fc8 <xPortStartScheduler+0x138>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <xPortStartScheduler+0x138>)
 8008f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f72:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <xPortStartScheduler+0x138>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <xPortStartScheduler+0x138>)
 8008f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f7e:	f000 f8dd 	bl	800913c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f82:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <xPortStartScheduler+0x13c>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f88:	f000 f8fc 	bl	8009184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f8c:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <xPortStartScheduler+0x140>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a0f      	ldr	r2, [pc, #60]	; (8008fd0 <xPortStartScheduler+0x140>)
 8008f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f98:	f7ff ff66 	bl	8008e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f9c:	f7ff f846 	bl	800802c <vTaskSwitchContext>
	prvTaskExitError();
 8008fa0:	f7ff ff1c 	bl	8008ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	e000ed00 	.word	0xe000ed00
 8008fb4:	410fc271 	.word	0x410fc271
 8008fb8:	410fc270 	.word	0x410fc270
 8008fbc:	e000e400 	.word	0xe000e400
 8008fc0:	240016a4 	.word	0x240016a4
 8008fc4:	240016a8 	.word	0x240016a8
 8008fc8:	e000ed20 	.word	0xe000ed20
 8008fcc:	24000010 	.word	0x24000010
 8008fd0:	e000ef34 	.word	0xe000ef34

08008fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	607b      	str	r3, [r7, #4]
}
 8008fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fee:	4b0f      	ldr	r3, [pc, #60]	; (800902c <vPortEnterCritical+0x58>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	4a0d      	ldr	r2, [pc, #52]	; (800902c <vPortEnterCritical+0x58>)
 8008ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ff8:	4b0c      	ldr	r3, [pc, #48]	; (800902c <vPortEnterCritical+0x58>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d10f      	bne.n	8009020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <vPortEnterCritical+0x5c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <vPortEnterCritical+0x4c>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	603b      	str	r3, [r7, #0]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <vPortEnterCritical+0x4a>
	}
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	24000010 	.word	0x24000010
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800903a:	4b12      	ldr	r3, [pc, #72]	; (8009084 <vPortExitCritical+0x50>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <vPortExitCritical+0x24>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	607b      	str	r3, [r7, #4]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009058:	4b0a      	ldr	r3, [pc, #40]	; (8009084 <vPortExitCritical+0x50>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3b01      	subs	r3, #1
 800905e:	4a09      	ldr	r2, [pc, #36]	; (8009084 <vPortExitCritical+0x50>)
 8009060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009062:	4b08      	ldr	r3, [pc, #32]	; (8009084 <vPortExitCritical+0x50>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d105      	bne.n	8009076 <vPortExitCritical+0x42>
 800906a:	2300      	movs	r3, #0
 800906c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	f383 8811 	msr	BASEPRI, r3
}
 8009074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	24000010 	.word	0x24000010
	...

08009090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009090:	f3ef 8009 	mrs	r0, PSP
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <pxCurrentTCBConst>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	f01e 0f10 	tst.w	lr, #16
 80090a0:	bf08      	it	eq
 80090a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090aa:	6010      	str	r0, [r2, #0]
 80090ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090b4:	f380 8811 	msr	BASEPRI, r0
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f7fe ffb4 	bl	800802c <vTaskSwitchContext>
 80090c4:	f04f 0000 	mov.w	r0, #0
 80090c8:	f380 8811 	msr	BASEPRI, r0
 80090cc:	bc09      	pop	{r0, r3}
 80090ce:	6819      	ldr	r1, [r3, #0]
 80090d0:	6808      	ldr	r0, [r1, #0]
 80090d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d6:	f01e 0f10 	tst.w	lr, #16
 80090da:	bf08      	it	eq
 80090dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090e0:	f380 8809 	msr	PSP, r0
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	f3af 8000 	nop.w

080090f0 <pxCurrentTCBConst>:
 80090f0:	24001078 	.word	0x24001078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
}
 8009110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009112:	f7fe fed1 	bl	8007eb8 <xTaskIncrementTick>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <xPortSysTickHandler+0x40>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f383 8811 	msr	BASEPRI, r3
}
 800912e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <vPortSetupTimerInterrupt+0x34>)
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <vPortSetupTimerInterrupt+0x38>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <vPortSetupTimerInterrupt+0x3c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a0a      	ldr	r2, [pc, #40]	; (800917c <vPortSetupTimerInterrupt+0x40>)
 8009152:	fba2 2303 	umull	r2, r3, r2, r3
 8009156:	099b      	lsrs	r3, r3, #6
 8009158:	4a09      	ldr	r2, [pc, #36]	; (8009180 <vPortSetupTimerInterrupt+0x44>)
 800915a:	3b01      	subs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800915e:	4b04      	ldr	r3, [pc, #16]	; (8009170 <vPortSetupTimerInterrupt+0x34>)
 8009160:	2207      	movs	r2, #7
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	e000e010 	.word	0xe000e010
 8009174:	e000e018 	.word	0xe000e018
 8009178:	24000000 	.word	0x24000000
 800917c:	10624dd3 	.word	0x10624dd3
 8009180:	e000e014 	.word	0xe000e014

08009184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009194 <vPortEnableVFP+0x10>
 8009188:	6801      	ldr	r1, [r0, #0]
 800918a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800918e:	6001      	str	r1, [r0, #0]
 8009190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009192:	bf00      	nop
 8009194:	e000ed88 	.word	0xe000ed88

08009198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800919e:	f3ef 8305 	mrs	r3, IPSR
 80091a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b0f      	cmp	r3, #15
 80091a8:	d914      	bls.n	80091d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091aa:	4a17      	ldr	r2, [pc, #92]	; (8009208 <vPortValidateInterruptPriority+0x70>)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091b4:	4b15      	ldr	r3, [pc, #84]	; (800920c <vPortValidateInterruptPriority+0x74>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	7afa      	ldrb	r2, [r7, #11]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d20a      	bcs.n	80091d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	607b      	str	r3, [r7, #4]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091d4:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <vPortValidateInterruptPriority+0x78>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091dc:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <vPortValidateInterruptPriority+0x7c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d90a      	bls.n	80091fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	603b      	str	r3, [r7, #0]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <vPortValidateInterruptPriority+0x60>
	}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	e000e3f0 	.word	0xe000e3f0
 800920c:	240016a4 	.word	0x240016a4
 8009210:	e000ed0c 	.word	0xe000ed0c
 8009214:	240016a8 	.word	0x240016a8

08009218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009224:	f7fe fd8c 	bl	8007d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009228:	4b5b      	ldr	r3, [pc, #364]	; (8009398 <pvPortMalloc+0x180>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009230:	f000 f920 	bl	8009474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009234:	4b59      	ldr	r3, [pc, #356]	; (800939c <pvPortMalloc+0x184>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4013      	ands	r3, r2
 800923c:	2b00      	cmp	r3, #0
 800923e:	f040 8093 	bne.w	8009368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01d      	beq.n	8009284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009248:	2208      	movs	r2, #8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b00      	cmp	r3, #0
 8009258:	d014      	beq.n	8009284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f023 0307 	bic.w	r3, r3, #7
 8009260:	3308      	adds	r3, #8
 8009262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <pvPortMalloc+0x6c>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	617b      	str	r3, [r7, #20]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d06e      	beq.n	8009368 <pvPortMalloc+0x150>
 800928a:	4b45      	ldr	r3, [pc, #276]	; (80093a0 <pvPortMalloc+0x188>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d869      	bhi.n	8009368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009294:	4b43      	ldr	r3, [pc, #268]	; (80093a4 <pvPortMalloc+0x18c>)
 8009296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009298:	4b42      	ldr	r3, [pc, #264]	; (80093a4 <pvPortMalloc+0x18c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800929e:	e004      	b.n	80092aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d903      	bls.n	80092bc <pvPortMalloc+0xa4>
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f1      	bne.n	80092a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092bc:	4b36      	ldr	r3, [pc, #216]	; (8009398 <pvPortMalloc+0x180>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d050      	beq.n	8009368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2208      	movs	r2, #8
 80092cc:	4413      	add	r3, r2
 80092ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	2308      	movs	r3, #8
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d91f      	bls.n	8009328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <pvPortMalloc+0xf8>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	613b      	str	r3, [r7, #16]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009322:	69b8      	ldr	r0, [r7, #24]
 8009324:	f000 f908 	bl	8009538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009328:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <pvPortMalloc+0x188>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	4a1b      	ldr	r2, [pc, #108]	; (80093a0 <pvPortMalloc+0x188>)
 8009334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009336:	4b1a      	ldr	r3, [pc, #104]	; (80093a0 <pvPortMalloc+0x188>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <pvPortMalloc+0x190>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d203      	bcs.n	800934a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009342:	4b17      	ldr	r3, [pc, #92]	; (80093a0 <pvPortMalloc+0x188>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <pvPortMalloc+0x190>)
 8009348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <pvPortMalloc+0x184>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	431a      	orrs	r2, r3
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800935e:	4b13      	ldr	r3, [pc, #76]	; (80093ac <pvPortMalloc+0x194>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a11      	ldr	r2, [pc, #68]	; (80093ac <pvPortMalloc+0x194>)
 8009366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009368:	f7fe fcf8 	bl	8007d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <pvPortMalloc+0x174>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60fb      	str	r3, [r7, #12]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <pvPortMalloc+0x172>
	return pvReturn;
 800938c:	69fb      	ldr	r3, [r7, #28]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3728      	adds	r7, #40	; 0x28
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	240052b4 	.word	0x240052b4
 800939c:	240052c8 	.word	0x240052c8
 80093a0:	240052b8 	.word	0x240052b8
 80093a4:	240052ac 	.word	0x240052ac
 80093a8:	240052bc 	.word	0x240052bc
 80093ac:	240052c0 	.word	0x240052c0

080093b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d04d      	beq.n	800945e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093c2:	2308      	movs	r3, #8
 80093c4:	425b      	negs	r3, r3
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4413      	add	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <vPortFree+0xb8>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4013      	ands	r3, r2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <vPortFree+0x44>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60fb      	str	r3, [r7, #12]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <vPortFree+0x62>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	60bb      	str	r3, [r7, #8]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	4b14      	ldr	r3, [pc, #80]	; (8009468 <vPortFree+0xb8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01e      	beq.n	800945e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d11a      	bne.n	800945e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <vPortFree+0xb8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009438:	f7fe fc82 	bl	8007d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <vPortFree+0xbc>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4413      	add	r3, r2
 8009446:	4a09      	ldr	r2, [pc, #36]	; (800946c <vPortFree+0xbc>)
 8009448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800944a:	6938      	ldr	r0, [r7, #16]
 800944c:	f000 f874 	bl	8009538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <vPortFree+0xc0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3301      	adds	r3, #1
 8009456:	4a06      	ldr	r2, [pc, #24]	; (8009470 <vPortFree+0xc0>)
 8009458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800945a:	f7fe fc7f 	bl	8007d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800945e:	bf00      	nop
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	240052c8 	.word	0x240052c8
 800946c:	240052b8 	.word	0x240052b8
 8009470:	240052c4 	.word	0x240052c4

08009474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800947a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800947e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009480:	4b27      	ldr	r3, [pc, #156]	; (8009520 <prvHeapInit+0xac>)
 8009482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00c      	beq.n	80094a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3307      	adds	r3, #7
 8009492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0307 	bic.w	r3, r3, #7
 800949a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	4a1f      	ldr	r2, [pc, #124]	; (8009520 <prvHeapInit+0xac>)
 80094a4:	4413      	add	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094ac:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <prvHeapInit+0xb0>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <prvHeapInit+0xb0>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094c0:	2208      	movs	r2, #8
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0307 	bic.w	r3, r3, #7
 80094ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4a15      	ldr	r2, [pc, #84]	; (8009528 <prvHeapInit+0xb4>)
 80094d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <prvHeapInit+0xb4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094de:	4b12      	ldr	r3, [pc, #72]	; (8009528 <prvHeapInit+0xb4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094f4:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <prvHeapInit+0xb4>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <prvHeapInit+0xb8>)
 8009502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <prvHeapInit+0xbc>)
 800950a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800950c:	4b09      	ldr	r3, [pc, #36]	; (8009534 <prvHeapInit+0xc0>)
 800950e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	240016ac 	.word	0x240016ac
 8009524:	240052ac 	.word	0x240052ac
 8009528:	240052b4 	.word	0x240052b4
 800952c:	240052bc 	.word	0x240052bc
 8009530:	240052b8 	.word	0x240052b8
 8009534:	240052c8 	.word	0x240052c8

08009538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009540:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <prvInsertBlockIntoFreeList+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e002      	b.n	800954c <prvInsertBlockIntoFreeList+0x14>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d8f7      	bhi.n	8009546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	4413      	add	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d108      	bne.n	800957a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	441a      	add	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d118      	bne.n	80095c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b15      	ldr	r3, [pc, #84]	; (80095e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d00d      	beq.n	80095b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e008      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvInsertBlockIntoFreeList+0xb0>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e003      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d002      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	240052ac 	.word	0x240052ac
 80095e8:	240052b4 	.word	0x240052b4

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4d0d      	ldr	r5, [pc, #52]	; (8009624 <__libc_init_array+0x38>)
 80095f0:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f2:	1b64      	subs	r4, r4, r5
 80095f4:	10a4      	asrs	r4, r4, #2
 80095f6:	2600      	movs	r6, #0
 80095f8:	42a6      	cmp	r6, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	4d0b      	ldr	r5, [pc, #44]	; (800962c <__libc_init_array+0x40>)
 80095fe:	4c0c      	ldr	r4, [pc, #48]	; (8009630 <__libc_init_array+0x44>)
 8009600:	f000 f8f2 	bl	80097e8 <_init>
 8009604:	1b64      	subs	r4, r4, r5
 8009606:	10a4      	asrs	r4, r4, #2
 8009608:	2600      	movs	r6, #0
 800960a:	42a6      	cmp	r6, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f855 3b04 	ldr.w	r3, [r5], #4
 8009614:	4798      	blx	r3
 8009616:	3601      	adds	r6, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f855 3b04 	ldr.w	r3, [r5], #4
 800961e:	4798      	blx	r3
 8009620:	3601      	adds	r6, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	080099b8 	.word	0x080099b8
 8009628:	080099b8 	.word	0x080099b8
 800962c:	080099b8 	.word	0x080099b8
 8009630:	080099bc 	.word	0x080099bc

08009634 <__retarget_lock_acquire_recursive>:
 8009634:	4770      	bx	lr

08009636 <__retarget_lock_release_recursive>:
 8009636:	4770      	bx	lr

08009638 <memcpy>:
 8009638:	440a      	add	r2, r1
 800963a:	4291      	cmp	r1, r2
 800963c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009640:	d100      	bne.n	8009644 <memcpy+0xc>
 8009642:	4770      	bx	lr
 8009644:	b510      	push	{r4, lr}
 8009646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800964e:	4291      	cmp	r1, r2
 8009650:	d1f9      	bne.n	8009646 <memcpy+0xe>
 8009652:	bd10      	pop	{r4, pc}

08009654 <memset>:
 8009654:	4402      	add	r2, r0
 8009656:	4603      	mov	r3, r0
 8009658:	4293      	cmp	r3, r2
 800965a:	d100      	bne.n	800965e <memset+0xa>
 800965c:	4770      	bx	lr
 800965e:	f803 1b01 	strb.w	r1, [r3], #1
 8009662:	e7f9      	b.n	8009658 <memset+0x4>

08009664 <cleanup_glue>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	460c      	mov	r4, r1
 8009668:	6809      	ldr	r1, [r1, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	b109      	cbz	r1, 8009672 <cleanup_glue+0xe>
 800966e:	f7ff fff9 	bl	8009664 <cleanup_glue>
 8009672:	4621      	mov	r1, r4
 8009674:	4628      	mov	r0, r5
 8009676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800967a:	f000 b869 	b.w	8009750 <_free_r>
	...

08009680 <_reclaim_reent>:
 8009680:	4b2c      	ldr	r3, [pc, #176]	; (8009734 <_reclaim_reent+0xb4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4283      	cmp	r3, r0
 8009686:	b570      	push	{r4, r5, r6, lr}
 8009688:	4604      	mov	r4, r0
 800968a:	d051      	beq.n	8009730 <_reclaim_reent+0xb0>
 800968c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800968e:	b143      	cbz	r3, 80096a2 <_reclaim_reent+0x22>
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d14a      	bne.n	800972c <_reclaim_reent+0xac>
 8009696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009698:	6819      	ldr	r1, [r3, #0]
 800969a:	b111      	cbz	r1, 80096a2 <_reclaim_reent+0x22>
 800969c:	4620      	mov	r0, r4
 800969e:	f000 f857 	bl	8009750 <_free_r>
 80096a2:	6961      	ldr	r1, [r4, #20]
 80096a4:	b111      	cbz	r1, 80096ac <_reclaim_reent+0x2c>
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 f852 	bl	8009750 <_free_r>
 80096ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096ae:	b111      	cbz	r1, 80096b6 <_reclaim_reent+0x36>
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 f84d 	bl	8009750 <_free_r>
 80096b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096b8:	b111      	cbz	r1, 80096c0 <_reclaim_reent+0x40>
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 f848 	bl	8009750 <_free_r>
 80096c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80096c2:	b111      	cbz	r1, 80096ca <_reclaim_reent+0x4a>
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 f843 	bl	8009750 <_free_r>
 80096ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096cc:	b111      	cbz	r1, 80096d4 <_reclaim_reent+0x54>
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f83e 	bl	8009750 <_free_r>
 80096d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096d6:	b111      	cbz	r1, 80096de <_reclaim_reent+0x5e>
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 f839 	bl	8009750 <_free_r>
 80096de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096e0:	b111      	cbz	r1, 80096e8 <_reclaim_reent+0x68>
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f834 	bl	8009750 <_free_r>
 80096e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ea:	b111      	cbz	r1, 80096f2 <_reclaim_reent+0x72>
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 f82f 	bl	8009750 <_free_r>
 80096f2:	69a3      	ldr	r3, [r4, #24]
 80096f4:	b1e3      	cbz	r3, 8009730 <_reclaim_reent+0xb0>
 80096f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096f8:	4620      	mov	r0, r4
 80096fa:	4798      	blx	r3
 80096fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096fe:	b1b9      	cbz	r1, 8009730 <_reclaim_reent+0xb0>
 8009700:	4620      	mov	r0, r4
 8009702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009706:	f7ff bfad 	b.w	8009664 <cleanup_glue>
 800970a:	5949      	ldr	r1, [r1, r5]
 800970c:	b941      	cbnz	r1, 8009720 <_reclaim_reent+0xa0>
 800970e:	3504      	adds	r5, #4
 8009710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009712:	2d80      	cmp	r5, #128	; 0x80
 8009714:	68d9      	ldr	r1, [r3, #12]
 8009716:	d1f8      	bne.n	800970a <_reclaim_reent+0x8a>
 8009718:	4620      	mov	r0, r4
 800971a:	f000 f819 	bl	8009750 <_free_r>
 800971e:	e7ba      	b.n	8009696 <_reclaim_reent+0x16>
 8009720:	680e      	ldr	r6, [r1, #0]
 8009722:	4620      	mov	r0, r4
 8009724:	f000 f814 	bl	8009750 <_free_r>
 8009728:	4631      	mov	r1, r6
 800972a:	e7ef      	b.n	800970c <_reclaim_reent+0x8c>
 800972c:	2500      	movs	r5, #0
 800972e:	e7ef      	b.n	8009710 <_reclaim_reent+0x90>
 8009730:	bd70      	pop	{r4, r5, r6, pc}
 8009732:	bf00      	nop
 8009734:	24000014 	.word	0x24000014

08009738 <__malloc_lock>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__malloc_lock+0x8>)
 800973a:	f7ff bf7b 	b.w	8009634 <__retarget_lock_acquire_recursive>
 800973e:	bf00      	nop
 8009740:	240052cc 	.word	0x240052cc

08009744 <__malloc_unlock>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__malloc_unlock+0x8>)
 8009746:	f7ff bf76 	b.w	8009636 <__retarget_lock_release_recursive>
 800974a:	bf00      	nop
 800974c:	240052cc 	.word	0x240052cc

08009750 <_free_r>:
 8009750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009752:	2900      	cmp	r1, #0
 8009754:	d044      	beq.n	80097e0 <_free_r+0x90>
 8009756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800975a:	9001      	str	r0, [sp, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f1a1 0404 	sub.w	r4, r1, #4
 8009762:	bfb8      	it	lt
 8009764:	18e4      	addlt	r4, r4, r3
 8009766:	f7ff ffe7 	bl	8009738 <__malloc_lock>
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <_free_r+0x94>)
 800976c:	9801      	ldr	r0, [sp, #4]
 800976e:	6813      	ldr	r3, [r2, #0]
 8009770:	b933      	cbnz	r3, 8009780 <_free_r+0x30>
 8009772:	6063      	str	r3, [r4, #4]
 8009774:	6014      	str	r4, [r2, #0]
 8009776:	b003      	add	sp, #12
 8009778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800977c:	f7ff bfe2 	b.w	8009744 <__malloc_unlock>
 8009780:	42a3      	cmp	r3, r4
 8009782:	d908      	bls.n	8009796 <_free_r+0x46>
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	1961      	adds	r1, r4, r5
 8009788:	428b      	cmp	r3, r1
 800978a:	bf01      	itttt	eq
 800978c:	6819      	ldreq	r1, [r3, #0]
 800978e:	685b      	ldreq	r3, [r3, #4]
 8009790:	1949      	addeq	r1, r1, r5
 8009792:	6021      	streq	r1, [r4, #0]
 8009794:	e7ed      	b.n	8009772 <_free_r+0x22>
 8009796:	461a      	mov	r2, r3
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	b10b      	cbz	r3, 80097a0 <_free_r+0x50>
 800979c:	42a3      	cmp	r3, r4
 800979e:	d9fa      	bls.n	8009796 <_free_r+0x46>
 80097a0:	6811      	ldr	r1, [r2, #0]
 80097a2:	1855      	adds	r5, r2, r1
 80097a4:	42a5      	cmp	r5, r4
 80097a6:	d10b      	bne.n	80097c0 <_free_r+0x70>
 80097a8:	6824      	ldr	r4, [r4, #0]
 80097aa:	4421      	add	r1, r4
 80097ac:	1854      	adds	r4, r2, r1
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	6011      	str	r1, [r2, #0]
 80097b2:	d1e0      	bne.n	8009776 <_free_r+0x26>
 80097b4:	681c      	ldr	r4, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	6053      	str	r3, [r2, #4]
 80097ba:	4421      	add	r1, r4
 80097bc:	6011      	str	r1, [r2, #0]
 80097be:	e7da      	b.n	8009776 <_free_r+0x26>
 80097c0:	d902      	bls.n	80097c8 <_free_r+0x78>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	e7d6      	b.n	8009776 <_free_r+0x26>
 80097c8:	6825      	ldr	r5, [r4, #0]
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf04      	itt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	6063      	str	r3, [r4, #4]
 80097d6:	bf04      	itt	eq
 80097d8:	1949      	addeq	r1, r1, r5
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	6054      	str	r4, [r2, #4]
 80097de:	e7ca      	b.n	8009776 <_free_r+0x26>
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	240052d0 	.word	0x240052d0

080097e8 <_init>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	bf00      	nop
 80097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ee:	bc08      	pop	{r3}
 80097f0:	469e      	mov	lr, r3
 80097f2:	4770      	bx	lr

080097f4 <_fini>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	bf00      	nop
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr
